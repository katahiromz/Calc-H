// HScanner.h
// (Japanese, Shift_JIS)
// LinuxÇÃèÍçáÇÕÅAUTF-8Ç…ïœä∑ÇµÇƒâ∫Ç≥Ç¢ÅB

#ifndef HSCANNER_H_
#define HSCANNER_H_

namespace Calc_H
{
    //
    // Scanner<Iterator, ParserSite>
    //
    template <class Iterator, class ParserSite>
    class Scanner
    {
    public:
        typedef ParserSite                  parser_site_type;
        typedef Iterator                    iterator_type;
        typedef TokenInfo<Calc_H::Token>    info_type;
        typedef shared_ptr<info_type>       shared_info_type;

    public:
        Scanner(parser_site_type& parser_site) :
            m_parser_site(parser_site),
            m_index(0)
        {
        }

        void scan(std::vector<info_type>& infos, Iterator begin, Iterator end)
        {
            m_begin = begin;
            m_current = begin;
            m_end = end;

            Token token;
            info_type info;
            do
            {
                token = get_token(info);
                info.set_token(token);
                infos.push_back(info);
            } while (token != Calc_H::eof);

            resynth0(infos);
            resynth1(infos);
            if (resynth2(infos))
            {
                resynth3(infos);
                resynth4(infos);
                resynth5(infos);
                resynth6(infos);
                resynth7(infos);
                resynth8(infos);
                resynth9(infos);
                resynth10(infos);
                resynth11(infos);
                resynth12(infos);
                resynth13(infos);
                resynth14(infos);
                resynth15(infos);
                resynth16(infos);
            }
        }

        std::string token_to_string(const info_type& info)
        {
            std::string str = token_label(info.m_token);
            return str;
        }

        template <class TokenInfoIt>
        void show_tokens(TokenInfoIt begin, TokenInfoIt end)
        {
            for (TokenInfoIt it = begin; it != end; ++it)
            {
                std::cerr << token_to_string(*it) << " ";
            }
            std::cerr << std::endl;
        }

        Token get_token(TokenValue& info)
        {
            int space_count = 0;
            for (;;)
            {
                bool flag = false;
                while (lexeme(" ") || lexeme("Å@") || lexeme("\t"))
                {
                    space_count++;
                    flag = true;
                }

                while (lexeme("Ç¶Ç¡Ç∆") || lexeme("Ç¶Ç¶Ç¡Ç∆") ||
                       lexeme("Ç¶Ç¡Ç∆Å[") || lexeme("Ç¶Ç¶Ç¡Ç∆Å[") ||
                       lexeme("Ç†ÇÃÇÀ") || lexeme("Ç†ÇÃÅ[") || 
                       lexeme("Ç†ÅA") || lexeme("Ç†Ç¡") ||
                       lexeme("Ç§ÇÒÇ∆ÇÀÅA") || lexeme("Ç¶Ç¡Ç∆ÇÀÅA") || 
                       lexeme("Ç§ÇÒÇ∆ÇÀÅ[ÅA") || lexeme("Ç¶Ç¡Ç∆ÇÀÅ[ÅA") || 
                       lexeme("Ç∆ÇÒÇ≈"))
                {
                    flag = true;
                }
                if (!flag)
                    break;
            }

            info.location() = location();

            if (space_count >= 2)
                return commit_token(T_COMMA);

            // arabic numeral
            std::string strNum;
            if (lexeme("0") || lexeme("1") || lexeme("2") || lexeme("3") || lexeme("4") ||
                lexeme("5") || lexeme("6") || lexeme("7") || lexeme("8") || lexeme("9") ||
                lexeme("ÇO") || lexeme("ÇP") || lexeme("ÇQ") || lexeme("ÇR") || lexeme("ÇS") ||
                lexeme("ÇT") || lexeme("ÇU") || lexeme("ÇV") || lexeme("ÇW") || lexeme("ÇX"))
            {
                bool has_dot = false;
                strNum = m_saved_str;
                while (lexeme("0") || lexeme("1") || lexeme("2") || lexeme("3") || lexeme("4") ||
                       lexeme("5") || lexeme("6") || lexeme("7") || lexeme("8") || lexeme("9") ||
                       lexeme("ÇO") || lexeme("ÇP") || lexeme("ÇQ") || lexeme("ÇR") || lexeme("ÇS") ||
                       lexeme("ÇT") || lexeme("ÇU") || lexeme("ÇV") || lexeme("ÇW") || lexeme("ÇX") ||
                       (!has_dot && (lexeme(".") || lexeme("ÅD"))))
                {
                    strNum += m_saved_str;
                    if (m_saved_str == "." || m_saved_str == "ÅD")
                    {
                        has_dot = true;
                    }
                }
                ChReplaceString(strNum, "ÇO", "0");
                ChReplaceString(strNum, "ÇP", "1");
                ChReplaceString(strNum, "ÇQ", "2");
                ChReplaceString(strNum, "ÇR", "3");
                ChReplaceString(strNum, "ÇS", "4");
                ChReplaceString(strNum, "ÇT", "5");
                ChReplaceString(strNum, "ÇU", "6");
                ChReplaceString(strNum, "ÇV", "7");
                ChReplaceString(strNum, "ÇW", "8");
                ChReplaceString(strNum, "ÇX", "9");
                ChReplaceString(strNum, "ÅD", ".");
                m_saved_str = strNum;
                return set_info(info, T_NUMBER);
            }

            if (lexeme("\n"))
            {
                newline();
                return set_info(info, T_PERIOD);
            }

            if (!lexeme("Ç≈ÇÕÇø", false) && lexeme("Ç≈ÇÕ")) return set_info(info, T_HA);
            if (!lexeme("Ç…Ç¢Çø", false) && lexeme("Ç…Ç¢")) return set_info(info, T_NI);
            if (!lexeme("ÇÇ»Ç»", false) && lexeme("ÇÇ»")) return set_info(info, T_WO1);
            if (!lexeme("Ç…Ç»Ç»", false) && lexeme("Ç…Ç»")) return set_info(info, T_NI);
            if (!lexeme("ÇÃÇ»Ç»", false) && lexeme("ÇÃÇ»")) return set_info(info, T_NO1);

            // ç≈í∑àÍívñ@ÅB
            // ÅyÇ±Ç±Ç©ÇÁÅzçsÇç~èáÇ…ï¿Ç—ë÷Ç¶ÇƒÇ®Ç≠ÅB
            if (lexeme("Å`"))                               return set_info(info, T_KARA);
            if (lexeme("Åp"))                               return set_info(info, T_R_PAREN);
            if (lexeme("Åo"))                               return set_info(info, T_L_PAREN);
            if (lexeme("ÇîÇÅÇéÇà"))                         return set_info(info, T_TANH);
            if (lexeme("ÇîÇÅÇé"))                           return set_info(info, T_TAN);
            if (lexeme("ÇìÇâÇéÇà"))                         return set_info(info, T_SINH);
            if (lexeme("ÇìÇâÇé"))                           return set_info(info, T_SIN);
            if (lexeme("ÇåÇèÇáÇPÇO"))                       return set_info(info, T_LOG10);
            if (lexeme("ÇåÇèÇá"))                           return set_info(info, T_LOG);
            if (lexeme("ÇåÇé"))                             return set_info(info, T_LOG);
            if (lexeme("ÇÜÇÅÇÇÇì"))                         return set_info(info, T_ZETTAICHI);
            if (lexeme("ÇÖÇòÇê"))                           return set_info(info, T_EXP);
            if (lexeme("ÇÉÇèÇìÇà"))                         return set_info(info, T_COSH);
            if (lexeme("ÇÉÇèÇì"))                           return set_info(info, T_COS);
            if (lexeme("ÇÅÇîÇÅÇé"))                         return set_info(info, T_ATAN);
            if (lexeme("ÇÅÇìÇâÇé"))                         return set_info(info, T_ASIN);
            if (lexeme("ÇÅÇíÇÉÇîÇÅÇé"))                     return set_info(info, T_ATAN);
            if (lexeme("ÇÅÇíÇÉÇìÇâÇé"))                     return set_info(info, T_ASIN);
            if (lexeme("ÇÅÇíÇÉÇÉÇèÇì"))                     return set_info(info, T_ACOS);
            if (lexeme("ÇÅÇÉÇèÇì"))                         return set_info(info, T_ACOS);
            if (lexeme("ÇÅÇÇÇì"))                           return set_info(info, T_ZETTAICHI);
            if (lexeme("Ån"))                               return set_info(info, T_R_PAREN);
            if (lexeme("Åm"))                               return set_info(info, T_L_PAREN);
            if (lexeme("ÅH"))                               return set_info(info, T_PERIOD);
            if (lexeme("ÅÅ"))                               return set_info(info, T_HA);
            if (lexeme("ÅD"))                               return set_info(info, T_PERIOD);
            if (lexeme("Å|"))                               return set_info(info, T_MINUS);
            if (lexeme("ÅC"))                               return set_info(info, T_COMMA);
            if (lexeme("Å{"))                               return set_info(info, T_TASU);
            if (lexeme("Åj"))                               return set_info(info, T_R_PAREN);
            if (lexeme("Åi"))                               return set_info(info, T_L_PAREN);
            if (lexeme("Åì"))                               return set_info(info, T_PERCENT);
            if (lexeme("ÅI"))                               return set_info(info, T_FACTORIAL);
            if (lexeme("óÎ"))                               return set_info(info, T_ZERO);
            if (lexeme("ó§"))                               return set_info(info, T_ROKU);
            if (lexeme("à¢ëm‚L"))                           return set_info(info, T_ASOUGI);
            if (lexeme("Ëî"))                               return set_info(info, T_SEN);
            if (lexeme("ìﬂóRëΩ"))                           return set_info(info, T_NAYUTA);
            if (lexeme("ìﬂóRëº"))                           return set_info(info, T_NAYUTA);
            if (lexeme("ç⁄"))                               return set_info(info, T_SAI);
            if (lexeme("„Ê"))                               return set_info(info, T_YON);
            if (lexeme("èı"))                               return set_info(info, T_JOU2);
            if (lexeme("ïS"))                               return set_info(info, T_HYAKU);
            if (lexeme("ãË"))                               return set_info(info, T_KYUU);
            if (lexeme("ñ≥ó ëÂêî"))                         return set_info(info, T_MURYOUTAISUU);
            if (lexeme("ä¿"))                               return set_info(info, T_KAN);
            if (lexeme("éΩ"))                               return set_info(info, T_NANA);
            if (lexeme("ça"))                               return set_info(info, T_KOU);
            if (lexeme("ê≥"))                               return set_info(info, T_SEI);
            if (lexeme("ã…"))                               return set_info(info, T_GOKU);
            if (lexeme("èE"))                               return set_info(info, T_JUU);
            if (lexeme("çPâÕçπ"))                           return set_info(info, T_GOUGASHA);
            if (lexeme("ìÛ"))                               return set_info(info, T_NI);
            if (lexeme("ì˘"))                               return set_info(info, T_HATA);
            if (lexeme("àÎ"))                               return set_info(info, T_ICHI);
            if (lexeme("ö¥"))                               return set_info(info, T_GAI);
            if (lexeme("él"))                               return set_info(info, T_YON);
            if (lexeme("éQ"))                               return set_info(info, T_SAN);
            if (lexeme("êÁ"))                               return set_info(info, T_SEN);
            if (lexeme("è\"))                               return set_info(info, T_JUU);
            if (lexeme("òZ"))                               return set_info(info, T_ROKU);
            if (lexeme("î™"))                               return set_info(info, T_HACHI);
            if (lexeme("íõ"))                               return set_info(info, T_CHOU);
            if (lexeme("â≠"))                               return set_info(info, T_OKU);
            if (lexeme("åﬁ"))                               return set_info(info, T_GO);
            if (lexeme("ò¿"))                               return set_info(info, T_SEN);
            if (lexeme("ãû"))                               return set_info(info, T_KEI);
            if (lexeme("å‹"))                               return set_info(info, T_GO);
            if (lexeme("ìÒ"))                               return set_info(info, T_NI);
            if (lexeme("ã„"))                               return set_info(info, T_KYUU);
            if (lexeme("ïsâ¬évãc"))                         return set_info(info, T_FUKASHIGI);
            if (lexeme("éO"))                               return set_info(info, T_SAN);
            if (lexeme("ñú"))                               return set_info(info, T_MAN);
            if (lexeme("éµ"))                               return set_info(info, T_NANA);
            if (lexeme("àÍ"))                               return set_info(info, T_ICHI);
            if (lexeme("ÅE"))                               return set_info(info, T_DOT);
            if (lexeme("ÇÒÇ‚"))                             return set_info(info, T_KANA);
            if (lexeme("ÇÇÌÇÈÇ±Ç∆ÇÃ"))                     return set_info(info, T_WARU);
            if (lexeme("ÇÇ–Ç≠Ç±Ç∆ÇÃ"))                     return set_info(info, T_HIKU);
            if (lexeme("ÇÇÀ"))                             return set_info(info, T_WO1);
            if (lexeme("Ç"))                               return set_info(info, T_WO1);
            if (lexeme("ÇÌÇÍÇÊ"))                           return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇÍÇ‚"))                           return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇÍÇŒ"))                           return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇÍ"))                             return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇÈÇ∆Ç´ÇÃ"))                       return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇÈÇ∆Ç´"))                         return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇÈÇ∆"))                           return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇÈÇ±Ç∆ÇÃ"))                       return set_info(info, T_WARU);
            if (lexeme("ÇÌÇÈ"))                             return set_info(info, T_WARU);
            if (lexeme("ÇÌÇËÇ»Ç≥Ç¢"))                       return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇËÇ¥ÇÒ"))                         return set_info(info, T_WARIZAN);
            if (lexeme("ÇÌÇËÇ´ÇÍÇÈÇÒÇ≈Ç∑"))                 return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÍÇÈÇÒÇ≈ÇµÇÂÇ§"))             return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÍÇÈÇÒ"))                     return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÍÇÈÇÃÇ≈Ç∑"))                 return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÍÇÈÇÃÇ≈ÇµÇÂÇ§"))             return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÍÇÈÇ≈ÇµÇÂÇ§"))               return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÍÇÈ"))                       return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÍÇ‹ÇπÇÒ"))                   return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÍÇ‹Ç∑"))                     return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÍÇ÷ÇÒÇÃ"))                   return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÍÇ÷ÇÒ"))                     return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÍÇ»Ç¢ÇÒÇ≈Ç∑"))               return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÍÇ»Ç¢ÇÒÇ≈ÇµÇÂÇ§"))           return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÍÇ»Ç¢ÇÃÇ≈Ç∑"))               return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÍÇ»Ç¢ÇÃÇ≈ÇµÇÂÇ§"))           return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÍÇ»Ç¢Ç≈ÇµÇÂÇ§"))             return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÍÇ»Ç¢"))                     return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÈÇÒÇ≈Ç∑"))                   return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÈÇÒÇ≈ÇµÇÂÇ§"))               return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÈÇÒ"))                       return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÈÇÃÇ≈Ç∑"))                   return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÈÇÃÇ≈ÇµÇÂÇ§"))               return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÈÇÃ"))                       return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÈÇ≈ÇµÇÂÇ§"))                 return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÈÇ±Ç∆Ç™Ç≈Ç´ÇÈÇÃÇ≈ÇµÇÂÇ§"))   return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÈÇ±Ç∆Ç™Ç≈Ç´ÇÈÇ≈ÇµÇÂÇ§"))     return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÈÇ±Ç∆Ç™Ç≈Ç´ÇÈ"))             return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÈÇ±Ç∆Ç™Ç≈Ç´Ç‹ÇπÇÒ"))         return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÈÇ±Ç∆Ç™Ç≈Ç´Ç‹Ç∑"))           return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇËÇ´ÇÈÇ±Ç∆Ç™Ç≈Ç´Ç÷ÇÒÇÃ"))         return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÈÇ±Ç∆Ç™Ç≈Ç´Ç÷ÇÒ"))           return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÈÇ±Ç∆Ç™Ç≈Ç´Ç»Ç¢ÇÒÇ≈ÇµÇÂÇ§")) return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÈÇ±Ç∆Ç™Ç≈Ç´Ç»Ç¢ÇÃÇ≈ÇµÇÂÇ§")) return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÈÇ±Ç∆Ç™Ç≈Ç´Ç»Ç¢"))           return set_info(info, T_WARIKIRENAI);
            if (lexeme("ÇÌÇËÇ´ÇÈ"))                         return set_info(info, T_WARIKIRU);
            if (lexeme("ÇÌÇË"))                             return set_info(info, T_WATTE);
            if (lexeme("ÇÌÇÁÇÍÇÈ"))                         return set_info(info, T_WARARERU);
            if (lexeme("ÇÌÇ¡ÇƒÇ›ÇÊ"))                       return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇ¡ÇƒÇ›Ç¢"))                       return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇ¡ÇƒÇ›Ç°"))                       return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇ¡ÇƒÇ›"))                         return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇ¡Çƒ"))                           return set_info(info, T_WATTE);
            if (lexeme("ÇÌÇ¡ÇΩÇÁ"))                         return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇ¡ÇΩÇ∆Ç´ÇÃ"))                     return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇ¡ÇΩÇ∆Ç´"))                       return set_info(info, T_WARUTO);
            if (lexeme("ÇÌÇ¡ÇΩ"))                           return set_info(info, T_WATTA);
            if (lexeme("ÇÌÇ©ÇÈÇÃ"))                         return set_info(info, T_WAKARAN);
            if (lexeme("ÇÌÇ©ÇÈ"))                           return set_info(info, T_WAKARAN);
            if (lexeme("ÇÌÇ©ÇËÇ‹ÇπÇÒ"))                     return set_info(info, T_WAKARAN);
            if (lexeme("ÇÌÇ©ÇËÇ‹Ç∑"))                       return set_info(info, T_WAKARAN);
            if (lexeme("ÇÌÇ©ÇÁÇÒÇÃ"))                       return set_info(info, T_WAKARAN);
            if (lexeme("ÇÌÇ©ÇÁÇÒÇ∆"))                       return set_info(info, T_WAKARAN);
            if (lexeme("ÇÌÇ©ÇÁÇÒ"))                         return set_info(info, T_WAKARAN);
            if (lexeme("ÇÌÇ©ÇÁÇ÷ÇÒÇÃ"))                     return set_info(info, T_WAKARAN);
            if (lexeme("ÇÌÇ©ÇÁÇ÷ÇÒ"))                       return set_info(info, T_WAKARAN);
            if (lexeme("ÇÌÇ©ÇÁÇ»Ç¢ÇÃ"))                     return set_info(info, T_WAKARAN);
            if (lexeme("ÇÌÇ©ÇÁÇ»Ç¢"))                       return set_info(info, T_WAKARAN);
            if (lexeme("ÇÌ"))                               return set_info(info, T_SUM);
            if (lexeme("ÇÎÇ¡"))                             return set_info(info, T_ROKU);
            if (lexeme("ÇÎÇÆ"))                             return set_info(info, T_LOG);
            if (lexeme("ÇÎÇ≠"))                             return set_info(info, T_ROKU);
            if (lexeme("ÇÍÇ¢"))                             return set_info(info, T_ZERO);
            if (lexeme("ÇÈÅ[Ç∆"))                           return set_info(info, T_ROOT);
            if (lexeme("ÇÈÇ§Ç∆"))                           return set_info(info, T_ROOT);
            if (lexeme("ÇËÇ¡Ç€Ç§"))                         return set_info(info, T_RIPPOU);
            if (lexeme("ÇÊÅ["))                             return set_info(info, T_KANA);
            if (lexeme("ÇÊÇÒ"))                             return set_info(info, T_YON);
            if (lexeme("ÇÊÇÎÇ∏"))                           return set_info(info, T_MAN);
            if (lexeme("ÇÊÇ¡"))                             return set_info(info, T_YON);
            if (lexeme("ÇÊÇª"))                             return set_info(info, T_YOSO);
            if (lexeme("ÇÊÇ∞ÇÒ"))                           return set_info(info, T_COS);
            if (lexeme("ÇÊÇ®"))                             return set_info(info, T_KANA);
            if (lexeme("ÇÊÇß"))                             return set_info(info, T_KANA);
            if (lexeme("ÇÊÇ§"))                             return set_info(info, T_KANA);
            if (lexeme("ÇÊÇ£"))                             return set_info(info, T_KANA);
            if (lexeme("ÇÊ"))                               return set_info(info, T_KANA);
            if (lexeme("Ç‚Å["))                             return set_info(info, T_HACHI);
            if (lexeme("Ç‚ÇÍÇÊ"))                           return set_info(info, T_SURUTO);
            if (lexeme("Ç‚ÇÍÇ‚"))                           return set_info(info, T_SURUTO);
            if (lexeme("Ç‚ÇÍÇŒ"))                           return set_info(info, T_SURUTO);
            if (lexeme("Ç‚ÇÍ"))                             return set_info(info, T_SURUTO);
            if (lexeme("Ç‚ÇÈÇ∆"))                           return set_info(info, T_SURUTO);
            if (lexeme("Ç‚ÇËÇ»Ç≥Ç¢"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç‚ÇÀÇÒ"))                           return set_info(info, T_KANA);
            if (lexeme("Ç‚ÇÀ"))                             return set_info(info, T_KANA);
            if (lexeme("Ç‚Ç¡ÇƒÇ›ÇÎÇÊ"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇƒÇ›ÇÎÇ‚"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇƒÇ›ÇÎ"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇƒÇ›ÇÍÇŒ"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇƒÇ›ÇÈÇ∆Ç´"))                   return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇƒÇ›ÇÈÇ∆"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇƒÇ›ÇÊ"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇƒÇ›ÇΩÇÁ"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇƒÇ›ÇΩÇ∆Ç´"))                   return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇƒÇ›Ç¢"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇƒÇ›Ç°"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇƒÇ›"))                         return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡Çƒ"))                           return set_info(info, T_SHITE);
            if (lexeme("Ç‚Ç¡ÇΩÇÁ"))                         return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇΩÇ∆Ç´"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç‚Ç¡ÇΩ"))                           return set_info(info, T_SHITA);
            if (lexeme("Ç‚Ç¡"))                             return set_info(info, T_HACHI);
            if (lexeme("Ç‚Ç®"))                             return set_info(info, T_YAO);
            if (lexeme("Ç‚Ç†"))                             return set_info(info, T_HACHI);
            if (lexeme("Ç‚Çü"))                             return set_info(info, T_HACHI);
            if (lexeme("Ç‚"))                               return set_info(info, T_KANA);
            if (lexeme("Ç‡Ç‡"))                             return set_info(info, T_HYAKU);
            if (lexeme("Ç‡ÇÃ"))                             return set_info(info, T_MONO);
            if (lexeme("Ç‡Ç∆ÇﬂÇÈÇ∆"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç‡Ç∆ÇﬂÇÊ"))                         return set_info(info, T_SURUTO);
            if (lexeme("Ç‡Ç∆ÇﬂÇ»Ç≥Ç¢"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç‡Ç∆ÇﬂÇƒÇ›ÇÊ"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç‡Ç∆ÇﬂÇƒÇ›Ç¢"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç‡Ç∆ÇﬂÇƒÇ›Ç°"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç‡Ç∆ÇﬂÇƒÇ›"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç‡Ç∆ÇﬂÇƒ"))                         return set_info(info, T_SHITE);
            if (lexeme("Ç‡Ç∆ÇﬂÇΩÇÁ"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç‡Ç∆ÇﬂÇΩ"))                         return set_info(info, T_SHITA);
            if (lexeme("Ç‡Ç∆Çﬂ"))                           return set_info(info, T_SHITE);
            if (lexeme("Ç‡"))                               return set_info(info, T_WO1);
            if (lexeme("ÇﬁÇËÇÂÇ§ÇΩÇ¢Ç∑Ç§"))                 return set_info(info, T_MURYOUTAISUU);
            if (lexeme("ÇﬁÇ¡"))                             return set_info(info, T_ROKU);
            if (lexeme("ÇﬁÇ§"))                             return set_info(info, T_ROKU);
            if (lexeme("Çﬁ"))                               return set_info(info, T_ROKU);
            if (lexeme("Ç›ÇÒÇ»"))                           return set_info(info, T_ALL);
            if (lexeme("Ç›ÇÍÇŒ"))                           return set_info(info, T_MIRUTO);
            if (lexeme("Ç›ÇÈÇ∆"))                           return set_info(info, T_MIRUTO);
            if (lexeme("Ç›Ç¡"))                             return set_info(info, T_SAN);
            if (lexeme("Ç›Ç¢"))                             return set_info(info, T_SAN);
            if (lexeme("Ç›"))                               return set_info(info, T_SAN);
            if (lexeme("Ç‹ÇÒ"))                             return set_info(info, T_MAN);
            if (lexeme("Ç‹Ç¢Ç»Ç∑Ç∑ÇÈÇ∆Ç´ÇÃ"))               return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑Ç∑ÇÈÇ∆Ç´"))                 return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇÎÇÊ"))                   return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇÎÇ‚"))                   return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇÎ"))                     return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇ»Ç≥Ç¢"))                 return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇƒÇ›ÇÊ"))                 return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇƒÇ›Ç¢"))                 return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇƒÇ›Ç°"))                 return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇƒÇ›"))                   return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇƒ"))                     return set_info(info, T_HIITE);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇΩÇÁ"))                   return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇΩÇ∆Ç´"))                 return set_info(info, T_HIKUTO);
            if (lexeme("Ç‹Ç¢Ç»Ç∑ÇµÇΩ"))                     return set_info(info, T_HIITA);
            if (lexeme("Ç‹Ç¢Ç»Ç∑Çµ"))                       return set_info(info, T_HIITE);
            if (lexeme("Ç‹Ç¢Ç»Ç∑Ç≥ÇÍÇÈ"))                   return set_info(info, T_HIKARERU);
            if (lexeme("Ç‹Ç¢Ç»Ç∑"))                         return set_info(info, T_MINUS);
            if (lexeme("Ç÷ÇÁÇπÇÊ"))                         return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇπÇ‚"))                         return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇπÇŒ"))                         return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇπ"))                           return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇ∑Ç∆Ç´ÇÃ"))                     return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇ∑Ç∆Ç´"))                       return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇ∑Ç∆"))                         return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇ∑"))                           return set_info(info, T_HIKU);
            if (lexeme("Ç÷ÇÁÇµÇ»Ç≥Ç¢"))                     return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇµÇƒÇ›ÇÊ"))                     return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇµÇƒÇ›Ç¢"))                     return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇµÇƒÇ›Ç°"))                     return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇµÇƒÇ›"))                       return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇµÇƒ"))                         return set_info(info, T_HIITE);
            if (lexeme("Ç÷ÇÁÇµÇΩÇÁ"))                       return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇµÇΩÇ∆Ç´ÇÃ"))                   return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇµÇΩÇ∆Ç´"))                     return set_info(info, T_HIKUTO);
            if (lexeme("Ç÷ÇÁÇµÇΩ"))                         return set_info(info, T_HIITA);
            if (lexeme("Ç÷ÇÁÇµ"))                           return set_info(info, T_HIITE);
            if (lexeme("Ç÷Ç¢ÇŸÇ§Ç±ÇÒ"))                     return set_info(info, T_HEIHOUKON);
            if (lexeme("Ç÷Ç¢ÇŸÇ§"))                         return set_info(info, T_HEIHOU);
            if (lexeme("Ç÷Ç¢Ç´ÇÒÇø"))                       return set_info(info, T_AVERAGE);
            if (lexeme("Ç÷Ç¢Ç´ÇÒ"))                         return set_info(info, T_AVERAGE);
            if (lexeme("Ç÷"))                               return set_info(info, T_NI);
            if (lexeme("Ç’ÇÁÇ∑Ç∑ÇÈÇ∆Ç´ÇÃ"))                 return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑Ç∑ÇÈÇ∆Ç´"))                   return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇÎÇÊ"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇÎÇ‚"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇÎ"))                       return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇ»Ç≥Ç¢"))                   return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇƒÇ›ÇÊ"))                   return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇƒÇ›Ç¢"))                   return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇƒÇ›Ç°"))                   return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇƒÇ›"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇƒ"))                       return set_info(info, T_TASHITE);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇΩÇÁ"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇΩÇ∆Ç´"))                   return set_info(info, T_TASUTO);
            if (lexeme("Ç’ÇÁÇ∑ÇµÇΩ"))                       return set_info(info, T_TASHITA);
            if (lexeme("Ç’ÇÁÇ∑Çµ"))                         return set_info(info, T_TASHITE);
            if (lexeme("Ç’ÇÁÇ∑Ç≥ÇÍÇÈ"))                     return set_info(info, T_TASARERU);
            if (lexeme("Ç’ÇÁÇ∑"))                           return set_info(info, T_PLUS);
            if (lexeme("Ç‘ÇÒÇÃ"))                           return set_info(info, T_BUNNO);
            if (lexeme("Ç”Ç‚ÇπÇÊ"))                         return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚ÇπÇ‚"))                         return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚ÇπÇŒ"))                         return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚Çπ"))                           return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚Ç∑Ç∆Ç´"))                       return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚Ç∑Ç∆"))                         return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚Ç∑"))                           return set_info(info, T_TASU);
            if (lexeme("Ç”Ç‚ÇµÇ»Ç≥Ç¢"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚ÇµÇƒÇ›ÇÊ"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚ÇµÇƒÇ›Ç¢"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚ÇµÇƒÇ›Ç°"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚ÇµÇƒÇ›"))                       return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚ÇµÇƒ"))                         return set_info(info, T_TASHITE);
            if (lexeme("Ç”Ç‚ÇµÇΩÇÁ"))                       return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚ÇµÇΩÇ∆Ç´ÇÃ"))                   return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚ÇµÇΩÇ∆Ç´"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç”Ç‚ÇµÇΩ"))                         return set_info(info, T_TASHITA);
            if (lexeme("Ç”ÇΩ"))                             return set_info(info, T_NI);
            if (lexeme("Ç”Ç©ÇµÇ¨"))                         return set_info(info, T_FUKASHIGI);
            if (lexeme("Ç“Ç·Ç≠"))                           return set_info(info, T_HYAKU);
            if (lexeme("Ç—Ç·Ç≠"))                           return set_info(info, T_HYAKU);
            if (lexeme("Ç–Å["))                             return set_info(info, T_ICHI);
            if (lexeme("Ç–Ç·Ç≠"))                           return set_info(info, T_HYAKU);
            if (lexeme("Ç–Ç∆"))                             return set_info(info, T_ICHI);
            if (lexeme("Ç–Çø"))                             return set_info(info, T_NANA);
            if (lexeme("Ç–Ç∂ÇÂÇ∑Ç§"))                       return set_info(info, T_HIJOSUU);
            if (lexeme("Ç–Ç∂ÇÂÇ§Ç∑Ç§"))                     return set_info(info, T_HIJOUSUU);
            if (lexeme("Ç–Ç∞ÇÒÇ∑Ç§"))                       return set_info(info, T_HIGENSUU);
            if (lexeme("Ç–ÇØÇÊ"))                           return set_info(info, T_HIKUTO);
            if (lexeme("Ç–ÇØÇ‚"))                           return set_info(info, T_HIKUTO);
            if (lexeme("Ç–ÇØÇŒ"))                           return set_info(info, T_HIKUTO);
            if (lexeme("Ç–ÇØ"))                             return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç≠Ç∆Ç´ÇÃ"))                       return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç≠Ç∆Ç´"))                         return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç≠Ç∆"))                           return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç≠Ç±Ç∆ÇÃ"))                       return set_info(info, T_HIKU);
            if (lexeme("Ç–Ç≠"))                             return set_info(info, T_HIKU);
            if (lexeme("Ç–Ç´Ç»Ç≥Ç¢"))                       return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç´Ç¥ÇÒ"))                         return set_info(info, T_HIKIZAN);
            if (lexeme("Ç–Ç´"))                             return set_info(info, T_HIITE);
            if (lexeme("Ç–Ç©ÇÍÇÈ"))                         return set_info(info, T_HIKARERU);
            if (lexeme("Ç–Ç©Ç∑Ç§"))                         return set_info(info, T_HIKASUU);
            if (lexeme("Ç–Ç¢ÇƒÇ›ÇÊ"))                       return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç¢ÇƒÇ›Ç¢"))                       return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç¢ÇƒÇ›Ç°"))                       return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç¢ÇƒÇ›"))                         return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç¢Çƒ"))                           return set_info(info, T_HIITE);
            if (lexeme("Ç–Ç¢ÇΩÇÁ"))                         return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç¢ÇΩÇ∆Ç´ÇÃ"))                     return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç¢ÇΩÇ∆Ç´"))                       return set_info(info, T_HIKUTO);
            if (lexeme("Ç–Ç¢ÇΩ"))                           return set_info(info, T_HIITA);
            if (lexeme("Ç–Ç¢"))                             return set_info(info, T_ICHI);
            if (lexeme("Ç–Ç°"))                             return set_info(info, T_ICHI);
            if (lexeme("ÇœÅ[ÇπÇÒÇ∆"))                       return set_info(info, T_PERCENT);
            if (lexeme("ÇœÅ["))                             return set_info(info, T_PERCENT);
            if (lexeme("ÇœÇ‹"))                             return set_info(info, T_HACHI);
            if (lexeme("ÇœÇ¢"))                             return set_info(info, T_PI);
            if (lexeme("ÇŒÇÒ"))                             return set_info(info, T_MAN);
            if (lexeme("ÇŒÇ¢"))                             return set_info(info, T_BAI);
            if (lexeme("ÇÕÇ¡"))                             return set_info(info, T_HACHI);
            if (lexeme("ÇÕÇø"))                             return set_info(info, T_HACHI);
            if (lexeme("ÇÕÇΩ"))                             return set_info(info, T_HATA);
            if (lexeme("ÇÕÇ¢ÇœÅ[Ç⁄ÇËÇ¡Ç≠"))                 return set_info(info, T_HYPERBOLIC);
            if (lexeme("ÇÕÇ¢ÇœÇ⁄ÇËÇ¡Ç≠"))                   return set_info(info, T_HYPERBOLIC);
            if (lexeme("ÇÕ"))                               return set_info(info, T_HA);
            if (lexeme("ÇÃÇ‚"))                             return set_info(info, T_KANA);
            if (lexeme("ÇÃÇÀ"))                             return set_info(info, T_NO1);
            if (lexeme("ÇÃÇ»Ç©Ç≈"))                         return set_info(info, T_NOUCHI);
            if (lexeme("ÇÃÇ§ÇøÇ≈"))                         return set_info(info, T_NOUCHI);
            if (lexeme("ÇÃÇ§Çø"))                           return set_info(info, T_NOUCHI);
            if (lexeme("ÇÃ"))                               return set_info(info, T_NO1);
            if (lexeme("ÇÀÇÒ"))                             return set_info(info, T_KANA);
            if (lexeme("ÇÀÇ¢Ç“Ç†Ç∑Ç§"))                     return set_info(info, T_E);
            if (lexeme("ÇÀ"))                               return set_info(info, T_KANA);
            if (lexeme("Ç…Å["))                             return set_info(info, T_NI);
            if (lexeme("Ç…ÇÀ"))                             return set_info(info, T_NI);
            if (lexeme("Ç…ÇΩÇ∑Ç±Ç∆ÇÃ"))                     return set_info(info, T_TASU);
            if (lexeme("Ç…Ç≠ÇÌÇ¶ÇÈÇ±Ç∆ÇÃ"))                 return set_info(info, T_TASU);
            if (lexeme("Ç…Ç©ÇØÇÈÇ±Ç∆ÇÃ"))                   return set_info(info, T_KAKERU);
            if (lexeme("Ç…Ç°"))                             return set_info(info, T_NI);
            if (lexeme("Ç…"))                               return set_info(info, T_NI);
            if (lexeme("Ç»Å[ÇÒÇæ"))                         return set_info(info, T_IKURA);
            if (lexeme("Ç»Å[Ç…"))                           return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ⁄Ç…Ç»ÇÈÇÒÇ≈ÇµÇÂÇ§"))           return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ⁄Ç…Ç»ÇÈÇÒÇæ"))                 return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ⁄Ç…Ç»ÇÈÇÃÇ≈ÇµÇÂÇ§"))           return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ⁄Ç…Ç»ÇÈÇ≈ÇµÇÂÇ§"))             return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ⁄Ç…Ç»ÇÈ"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ⁄Ç…Ç»ÇËÇ‹Ç∑"))                 return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ⁄Ç»ÇÒ"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ⁄Ç»ÇÃ"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ⁄Ç≈ÇµÇÂÇ§"))                   return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ⁄ÇæÇÎÇ§"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ⁄"))                           return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ…Ç»ÇÈÇÒÇ≈ÇµÇÂÇ§"))             return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ…Ç»ÇÈÇÒÇæ"))                   return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ…Ç»ÇÈÇÃÇ≈ÇµÇÂÇ§"))             return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ…Ç»ÇÈÇ≈ÇµÇÂÇ§"))               return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ…Ç»ÇÈ"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ…Ç»ÇËÇ‹Ç∑"))                   return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ»ÇÒÇ≈Ç¡"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ»ÇÒÇ≈Ç∑"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ»ÇÒÇ≈ÇµÇÂÇ§"))                 return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ»ÇÒÇæÇÎÇ§"))                   return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ»ÇÒ"))                         return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ»ÇÃÇ≈Ç¡"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ»ÇÃÇ≈Ç∑"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ»ÇÃÇ≈ÇµÇÂÇ§"))                 return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ»ÇÃÇæÇÎÇ§"))                   return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ»ÇÃ"))                         return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ≈Ç¡"))                         return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ≈Ç∑"))                         return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇ≈ÇµÇÂÇ§"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇæÇÎÇ§"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒÇæ"))                           return set_info(info, T_IKURA);
            if (lexeme("Ç»ÇÒ"))                             return set_info(info, T_IKURA);
            if (lexeme("Ç»Ç‰ÇΩ"))                           return set_info(info, T_NAYUTA);
            if (lexeme("Ç»Ç "))                             return set_info(info, T_NANA);
            if (lexeme("Ç»Ç…Ç…Ç»ÇÈÇÒÇ≈Ç∑"))                 return set_info(info, T_IKURA);
            if (lexeme("Ç»Ç…Ç…Ç»ÇÈÇÃÇ≈Ç∑"))                 return set_info(info, T_IKURA);
            if (lexeme("Ç»Ç…Ç…Ç»ÇÈÇ≈ÇµÇÂÇ§"))               return set_info(info, T_IKURA);
            if (lexeme("Ç»Ç…Ç…Ç»ÇÈ"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç»Ç…Ç≈Ç¡"))                         return set_info(info, T_IKURA);
            if (lexeme("Ç»Ç…Ç≈Ç∑"))                         return set_info(info, T_IKURA);
            if (lexeme("Ç»Ç…"))                             return set_info(info, T_IKURA);
            if (lexeme("Ç»Ç»"))                             return set_info(info, T_NANA);
            if (lexeme("Ç»Ç®ÇπÇÊ"))                         return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇπÇ‚"))                         return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®Çπ"))                           return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®Ç∑Ç∆Ç´ÇÃ"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®Ç∑Ç∆Ç´"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®Ç∑Ç∆"))                         return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇ»Ç≥Ç¢"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇƒÇ›ÇÎÇÊ"))                   return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇƒÇ›ÇÎÇ‚"))                   return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇƒÇ›ÇÎ"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇƒÇ›ÇÊ"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇƒÇ›Ç»Ç≥Ç¢"))                 return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇƒÇ›Ç¢"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇƒÇ›Ç°"))                     return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇƒÇ›"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇƒ"))                         return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇΩÇÁ"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç»Ç®ÇµÇΩ"))                         return set_info(info, T_SHITA);
            if (lexeme("Ç»Ç†Ç…"))                           return set_info(info, T_IKURA);
            if (lexeme("Ç«ÇÒÇ»Ç©Ç∏Ç…Ç»ÇÈÇÒÇ≈ÇµÇÂÇ§"))       return set_info(info, T_IKURA);
            if (lexeme("Ç«ÇÒÇ»Ç©Ç∏Ç…Ç»ÇÈÇÃÇ≈ÇµÇÂÇ§"))       return set_info(info, T_IKURA);
            if (lexeme("Ç«ÇÒÇ»Ç©Ç∏Ç…Ç»ÇÈÇ≈ÇµÇÂÇ§"))         return set_info(info, T_IKURA);
            if (lexeme("Ç«ÇÒÇ»Ç©Ç∏Ç…Ç»ÇÈ"))                 return set_info(info, T_IKURA);
            if (lexeme("Ç«ÇÒÇ»Ç©Ç∏Ç…Ç»ÇËÇ‹Ç∑"))             return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç»Ç¢Ç»ÇÈÇÒÇ≈ÇµÇÂÇ§"))             return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç»Ç¢Ç»ÇÈÇÃÇ≈ÇµÇÂÇ§"))             return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç»Ç¢Ç»ÇÈ"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç»Ç¢Ç≈Ç¡"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç»Ç¢Ç≈Ç∑"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç»Ç¢Ç≈ÇµÇÂÇ§"))                   return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç»Ç¢"))                           return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç§Ç»ÇÒÇ≈Ç¡"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç§Ç»ÇÒÇ≈Ç∑"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç§Ç»ÇÒÇ≈ÇµÇÂÇ§"))                 return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç§Ç»ÇÒ"))                         return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç§Ç»ÇÈ"))                         return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç§Ç»ÇËÇ‹Ç∑"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç§Ç»ÇÃÇ≈Ç¡"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç§Ç»ÇÃÇ≈Ç∑"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç§Ç»ÇÃÇ≈ÇµÇÂÇ§"))                 return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç§Ç»ÇÃ"))                         return set_info(info, T_IKURA);
            if (lexeme("Ç«Ç§"))                             return set_info(info, T_IKURA);
            if (lexeme("Ç«"))                               return set_info(info, T_DO);
            if (lexeme("Ç∆ÇÀÅA"))                           return set_info(info, T_TO1);
            if (lexeme("Ç∆Ç»ÅA"))                           return set_info(info, T_TO1);
            if (lexeme("Ç∆Ç∂Ç©Ç¡Ç±"))                       return set_info(info, T_R_PAREN);
            if (lexeme("Ç∆Ç®"))                             return set_info(info, T_JUU);
            if (lexeme("Ç∆"))                               return set_info(info, T_TO1);
            if (lexeme("Ç≈ÇÒÇÀÇÒ"))                         return set_info(info, T_KANA);
            if (lexeme("Ç≈"))                               return set_info(info, T_DE);
            if (lexeme("ÇƒÇÒ"))                             return set_info(info, T_DOT);
            if (lexeme("Ç¬Ç‘ÇÒ"))                           return set_info(info, T_BAI);
            if (lexeme("Ç¡Çƒ"))                             return set_info(info, T_HA);
            if (lexeme("ÇøÇÂÇ§Ç–Ç·Ç≠"))                     return set_info(info, T_HYAKU);
            if (lexeme("ÇøÇÂÇ§ÇÕÇÒ"))                       return set_info(info, T_GO);
            if (lexeme("ÇøÇÂÇ§"))                           return set_info(info, T_CHOU);
            if (lexeme("Çø"))                               return set_info(info, T_SEN);
            if (lexeme("ÇΩÇÒÇ∫ÇÒÇ∆"))                       return set_info(info, T_TAN);
            if (lexeme("ÇΩÇÒÇ∂Ç•ÇÒÇ∆"))                     return set_info(info, T_TAN);
            if (lexeme("ÇΩÇπÇÊ"))                           return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇπÇ‚"))                           return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇπÇŒ"))                           return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇπ"))                             return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇ∑Ç∆Ç´"))                         return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇ∑Ç∆"))                           return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇ∑Ç±Ç∆ÇÃ"))                       return set_info(info, T_TASU);
            if (lexeme("ÇΩÇ∑"))                             return set_info(info, T_TASU);
            if (lexeme("ÇΩÇµÇ»Ç≥Ç¢"))                       return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇƒÇ›ÇÊ"))                       return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇƒÇ›Ç¢"))                       return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇƒÇ›Ç°"))                       return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇƒÇ›"))                         return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇƒ"))                           return set_info(info, T_TASHITE);
            if (lexeme("ÇΩÇµÇΩÇÁ"))                         return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇΩÇ∆Ç´ÇÃ"))                     return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇΩÇ∆Ç´"))                       return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇΩ"))                           return set_info(info, T_TASHITA);
            if (lexeme("ÇΩÇµÇ¥ÇÒ"))                         return set_info(info, T_TASHIZAN);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇÎÇÊ"))                   return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇÎÇ‚"))                   return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇÎ"))                     return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇÍÇŒ"))                   return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇÈÇ∆Ç´"))                 return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇÈÇ∆"))                   return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇÈ"))                     return set_info(info, T_TASU);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇÊ"))                     return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇ»Ç≥Ç¢"))                 return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇƒÇ›ÇÊ"))                 return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇƒÇ›Ç¢"))                 return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇƒÇ›Ç°"))                 return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇƒÇ›"))                   return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇƒ"))                     return set_info(info, T_TASHITE);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇΩÇ∆Ç´ÇÃ"))               return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇΩÇ∆Ç´"))                 return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπÇΩ"))                     return set_info(info, T_TASHITA);
            if (lexeme("ÇΩÇµÇ†ÇÌÇπ"))                       return set_info(info, T_TASUTO);
            if (lexeme("ÇΩÇµÇ†ÇÌÇ∑"))                       return set_info(info, T_TASU);
            if (lexeme("ÇΩÇµÇ†ÇÌÇ≥ÇÍÇÈ"))                   return set_info(info, T_TASARERU);
            if (lexeme("ÇΩÇµ"))                             return set_info(info, T_TASHITE);
            if (lexeme("ÇΩÇ≥ÇÍÇÈ"))                         return set_info(info, T_TASARERU);
            if (lexeme("ÇΩÇ¢Ç∑Ç§Ç©ÇÒÇ∑Ç§"))                 return set_info(info, T_LOG);
            if (lexeme("ÇΩÇ¢Ç∑Ç§"))                         return set_info(info, T_LOG);
            if (lexeme("ÇªÇÍÇÃ"))                           return set_info(info, T_SONO);
            if (lexeme("ÇªÇÍÇ™ÇµÇÃ"))                       return set_info(info, T_SONO);
            if (lexeme("ÇªÇÍÇ™Çµ"))                         return set_info(info, T_SORE);
            if (lexeme("ÇªÇÍ"))                             return set_info(info, T_SORE);
            if (lexeme("ÇªÇ‚Ç¬"))                           return set_info(info, T_SORE);
            if (lexeme("ÇªÇÃÇ∆Ç´"))                         return set_info(info, T_SURUTO);
            if (lexeme("ÇªÇÃÇ±ÇΩÇ¶"))                       return set_info(info, T_KOTAE);
            if (lexeme("ÇªÇÃ"))                             return set_info(info, T_SONO);
            if (lexeme("ÇªÇ§ÇÌ"))                           return set_info(info, T_SUM);
            if (lexeme("ÇªÇ§Ç´ÇÂÇ≠ÇπÇÒ"))                   return set_info(info, T_HYPERBOLIC);
            if (lexeme("ÇªÇ¢Ç¬"))                           return set_info(info, T_SORE);
            if (lexeme("Çª"))                               return set_info(info, T_JUU);
            if (lexeme("Ç∫ÇÒÇ‘"))                           return set_info(info, T_ALL);
            if (lexeme("Ç∫ÇÒ"))                             return set_info(info, T_SEN);
            if (lexeme("Ç∫ÇÎ"))                             return set_info(info, T_ZERO);
            if (lexeme("Ç∫Ç¡ÇΩÇ¢Çø"))                       return set_info(info, T_ZETTAICHI);
            if (lexeme("ÇπÇÒ"))                             return set_info(info, T_SEN);
            if (lexeme("ÇπÇÊ"))                             return set_info(info, T_SURUTO);
            if (lexeme("ÇπÇ´"))                             return set_info(info, T_PROD);
            if (lexeme("ÇπÇ¢Ç‚"))                           return set_info(info, T_SURUTO);
            if (lexeme("ÇπÇ¢ÇπÇ¬"))                         return set_info(info, T_TAN);
            if (lexeme("ÇπÇ¢Ç∞ÇÒ"))                         return set_info(info, T_SIN);
            if (lexeme("ÇπÇ¢"))                             return set_info(info, T_SEI);
            if (lexeme("Ç∑ÇÍÇŒ"))                           return set_info(info, T_SURUTO);
            if (lexeme("Ç∑ÇÈÇ∆Ç´ÇÃ"))                       return set_info(info, T_SURUTO);
            if (lexeme("Ç∑ÇÈÇ∆Ç´"))                         return set_info(info, T_SURUTO);
            if (lexeme("Ç∑ÇÈÇ∆"))                           return set_info(info, T_SURUTO);
            if (lexeme("Ç∑ÇÈ"))                             return set_info(info, T_SURU);
            if (lexeme("Ç∑Ç◊Çƒ"))                           return set_info(info, T_ALL);
            if (lexeme("Ç∂ÇÂÅ["))                           return set_info(info, T_JOU1);
            if (lexeme("Ç∂ÇÂÇ∑Ç§"))                         return set_info(info, T_JOSUU);
            if (lexeme("Ç∂ÇÂÇ¥ÇÒ"))                         return set_info(info, T_WARIZAN);
            if (lexeme("Ç∂ÇÂÇ§ÇÊÇ§ÇΩÇ¢Ç∑Ç§"))               return set_info(info, T_LOG10);
            if (lexeme("Ç∂ÇÂÇ§ÇÊ"))                         return set_info(info, T_AMARI);
            if (lexeme("Ç∂ÇÂÇ§Ç∑Ç§"))                       return set_info(info, T_JOUSUU);
            if (lexeme("Ç∂ÇÂÇ§Ç¥ÇÒ"))                       return set_info(info, T_KAKEZAN);
            if (lexeme("Ç∂ÇÂÇ§"))                           return set_info(info, T_JOU1);
            if (lexeme("Ç∂ÇÂ"))                             return set_info(info, T_JO);
            if (lexeme("Ç∂Ç„Å["))                           return set_info(info, T_JUU);
            if (lexeme("Ç∂Ç„Ç¡"))                           return set_info(info, T_JUU);
            if (lexeme("Ç∂Ç„Ç§"))                           return set_info(info, T_JUU);
            if (lexeme("Ç∂Ç¡"))                             return set_info(info, T_JUU);
            if (lexeme("Ç∂Ç∂ÇÂÇ§"))                         return set_info(info, T_HEIHOU);
            if (lexeme("ÇµÅ[Ç‚"))                           return set_info(info, T_SURUTO);
            if (lexeme("ÇµÅ["))                             return set_info(info, T_YON);
            if (lexeme("ÇµÇÎÇÊ"))                           return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇÎÇ‚"))                           return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇÎ"))                             return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇÁÇÒ"))                           return set_info(info, T_WAKARAN);
            if (lexeme("ÇµÇÁÇ»Ç¢"))                         return set_info(info, T_WAKARAN);
            if (lexeme("ÇµÇÂÅ[Ç∑Å["))                       return set_info(info, T_SHOUSUU);
            if (lexeme("ÇµÇÂÅ[Ç∑Ç§"))                       return set_info(info, T_SHOUSUU);
            if (lexeme("ÇµÇÂÅ["))                           return set_info(info, T_QUOT);
            if (lexeme("ÇµÇÂÇ§Ç∑Å["))                       return set_info(info, T_SHOUSUU);
            if (lexeme("ÇµÇÂÇ§Ç∑Ç§"))                       return set_info(info, T_SHOUSUU);
            if (lexeme("ÇµÇÂÇ§"))                           return set_info(info, T_QUOT);
            if (lexeme("ÇµÇ»Ç≥Ç¢"))                         return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇÊ"))                           return set_info(info, T_SHITE);
            if (lexeme("ÇµÇƒÇ‚"))                           return set_info(info, T_SHITE);
            if (lexeme("ÇµÇƒÇ›ÇÎÇÊ"))                       return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇ›ÇÎÇ‚"))                       return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇ›ÇÎ"))                         return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇ›ÇÍÇŒ"))                       return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇ›ÇÈÇ∆Ç´ÇÃ"))                   return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇ›ÇÈÇ∆Ç´"))                     return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇ›ÇÈÇ∆"))                       return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇ›ÇÊ"))                         return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇ›Ç»Ç≥Ç¢"))                     return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇ›Ç¢"))                         return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇ›Ç°"))                         return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒÇ›"))                           return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇƒ"))                             return set_info(info, T_SHITE);
            if (lexeme("ÇµÇø"))                             return set_info(info, T_NANA);
            if (lexeme("ÇµÇΩÇÁ"))                           return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇΩÇ∆Ç´ÇÃ"))                       return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇΩÇ∆Ç´"))                         return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇΩ"))                             return set_info(info, T_SHITA);
            if (lexeme("ÇµÇ∫ÇÒÇΩÇ¢Ç∑Ç§ÇÃÇƒÇ¢"))             return set_info(info, T_E);
            if (lexeme("ÇµÇ∫ÇÒÇΩÇ¢Ç∑Ç§"))                   return set_info(info, T_LOG);
            if (lexeme("ÇµÇ∑Ç§Ç©ÇÒÇ∑Ç§"))                   return set_info(info, T_EXP);
            if (lexeme("ÇµÇ∑Ç§"))                           return set_info(info, T_EXP);
            if (lexeme("ÇµÇ¢Ç‚"))                           return set_info(info, T_SURUTO);
            if (lexeme("ÇµÇ¢"))                             return set_info(info, T_YON);
            if (lexeme("ÇµÇ°"))                             return set_info(info, T_YON);
            if (lexeme("Çµ"))                               return set_info(info, T_YON);
            if (lexeme("Ç≥ÇÒ"))                             return set_info(info, T_SAN);
            if (lexeme("Ç≥ÇµÇ–ÇØÇÊ"))                       return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–ÇØÇ‚"))                       return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–ÇØ"))                         return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–Ç≠Ç∆Ç´"))                     return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–Ç´Ç»Ç≥Ç¢"))                   return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–Ç´"))                         return set_info(info, T_HIITE);
            if (lexeme("Ç≥ÇµÇ–Ç©ÇÍÇÈ"))                     return set_info(info, T_HIKARERU);
            if (lexeme("Ç≥ÇµÇ–Ç¢ÇƒÇ›ÇÊ"))                   return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–Ç¢ÇƒÇ›Ç¢"))                   return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–Ç¢ÇƒÇ›Ç°"))                   return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–Ç¢ÇƒÇ›"))                     return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–Ç¢Çƒ"))                       return set_info(info, T_HIITE);
            if (lexeme("Ç≥ÇµÇ–Ç¢ÇΩÇÁ"))                     return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–Ç¢ÇΩÇ∆Ç´ÇÃ"))                 return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–Ç¢ÇΩÇ∆Ç´"))                   return set_info(info, T_HIKUTO);
            if (lexeme("Ç≥ÇµÇ–Ç¢ÇΩ"))                       return set_info(info, T_HIITA);
            if (lexeme("Ç≥Ç¢ÇÒ"))                           return set_info(info, T_SIN);
            if (lexeme("Ç≥Ç¢ÇæÇ¢Ç∆Ç»ÇÈÇ‡ÇÃ"))               return set_info(info, T_MAX);
            if (lexeme("Ç≥Ç¢ÇæÇ¢Ç∆Ç»ÇÈÇ©Ç∏"))               return set_info(info, T_MAX);
            if (lexeme("Ç≥Ç¢ÇæÇ¢Çø"))                       return set_info(info, T_MAX);
            if (lexeme("Ç≥Ç¢ÇµÇÂÅ[Ç∆Ç»ÇÈÇ©Ç∏"))             return set_info(info, T_MIN);
            if (lexeme("Ç≥Ç¢ÇµÇÂÅ[Çø"))                     return set_info(info, T_MIN);
            if (lexeme("Ç≥Ç¢ÇµÇÂÇ§Ç∆Ç»ÇÈÇ©Ç∏"))             return set_info(info, T_MIN);
            if (lexeme("Ç≥Ç¢ÇµÇÂÇ§Çø"))                     return set_info(info, T_MIN);
            if (lexeme("Ç≥Ç¢"))                             return set_info(info, T_SAI);
            if (lexeme("Ç≥"))                               return set_info(info, T_DIFF);
            if (lexeme("Ç≤Ç≠"))                             return set_info(info, T_GOKU);
            if (lexeme("Ç≤Ç§ÇØÇ¢"))                         return set_info(info, T_SUM);
            if (lexeme("Ç≤Ç§Ç™ÇµÇ·"))                       return set_info(info, T_GOUGASHA);
            if (lexeme("Ç≤Ç§"))                             return set_info(info, T_GO);
            if (lexeme("Ç≤"))                               return set_info(info, T_GO);
            if (lexeme("Ç±ÇÍÇÃ"))                           return set_info(info, T_SONO);
            if (lexeme("Ç±ÇÍ"))                             return set_info(info, T_SORE);
            if (lexeme("Ç±Ç‚Ç¬"))                           return set_info(info, T_SORE);
            if (lexeme("Ç±Ç‘ÇÒ"))                           return set_info(info, T_BAI);
            if (lexeme("Ç±ÇÃÇ∆Ç´"))                         return set_info(info, T_SURUTO);
            if (lexeme("Ç±ÇΩÇ¶ÇÎÇÊ"))                       return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇÎÇ‚"))                       return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇÎ"))                         return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇÊ"))                         return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶Ç»Ç≥Ç¢"))                     return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ›ÇÊ"))                     return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ›Ç¢"))                     return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ›Ç°"))                     return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ›"))                       return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ≠ÇÍÇÈÇ©Ç¢"))               return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ≠ÇÍÇÈÇ©"))                 return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ≠ÇÍÇÈ"))                   return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ≠ÇÍÇÊ"))                   return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ≠ÇÍÇ‚"))                   return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ≠ÇÍ"))                     return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ≠ÇæÇ≥Ç¢ÇÊ"))               return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶ÇƒÇ≠ÇæÇ≥Ç¢"))                 return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶Çƒ"))                         return set_info(info, T_OSHIETE);
            if (lexeme("Ç±ÇΩÇ¶"))                           return set_info(info, T_KOTAE);
            if (lexeme("Ç±Ç∑Ç§"))                           return set_info(info, T_COUNT);
            if (lexeme("Ç±Ç≥Ç¢ÇÒ"))                         return set_info(info, T_COS);
            if (lexeme("Ç±Ç±ÇÃ"))                           return set_info(info, T_KYUU);
            if (lexeme("Ç±Ç±"))                             return set_info(info, T_KYUU);
            if (lexeme("Ç±Ç§"))                             return set_info(info, T_KOU);
            if (lexeme("Ç±Ç¢Ç¬"))                           return set_info(info, T_SORE);
            if (lexeme("Ç∞ÇÒÇ∑Ç§"))                         return set_info(info, T_GENSUU);
            if (lexeme("Ç∞ÇÒÇ¥ÇÒ"))                         return set_info(info, T_HIKIZAN);
            if (lexeme("ÇØÇ¢Ç≥ÇÒ"))                         return set_info(info, T_KEISAN);
            if (lexeme("ÇØÇ¢"))                             return set_info(info, T_KEI);
            if (lexeme("Ç≠ÇÌÇ¶ÇÎÇÊ"))                       return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇÎÇ‚"))                       return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇÎ"))                         return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇÈÇ∆Ç´ÇÃ"))                   return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇÈÇ∆Ç´"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇÈÇ∆"))                       return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇÈÇ±Ç∆ÇÃ"))                   return set_info(info, T_TASU);
            if (lexeme("Ç≠ÇÌÇ¶ÇÈ"))                         return set_info(info, T_TASU);
            if (lexeme("Ç≠ÇÌÇ¶ÇÁÇÍÇÈ"))                     return set_info(info, T_TASARERU);
            if (lexeme("Ç≠ÇÌÇ¶Ç»Ç≥Ç¢"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇƒÇ›ÇÊ"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇƒÇ›Ç¢"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇƒÇ›Ç°"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇƒÇ›"))                       return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶Çƒ"))                         return set_info(info, T_TASHITE);
            if (lexeme("Ç≠ÇÌÇ¶ÇΩÇÁ"))                       return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇΩÇ∆Ç´ÇÃ"))                   return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇΩÇ∆Ç´"))                     return set_info(info, T_TASUTO);
            if (lexeme("Ç≠ÇÌÇ¶ÇΩ"))                         return set_info(info, T_TASHITA);
            if (lexeme("Ç≠ÇÍÇÈÇ‚"))                         return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇÍÇÈÇ©Ç»Ç†"))                     return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇÍÇÈÇ©Ç»Çü"))                     return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇÍÇÈÇ©Ç»"))                       return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇÍÇÈÇ©Ç¢"))                       return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇÍÇÈ"))                           return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇÍÇÊÅ["))                         return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇÍÇÊÇ£"))                         return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇÍÇÊ"))                           return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇÍÇ‚"))                           return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇÍ"))                             return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇæÇ≥Ç¢ÇÊÅ["))                     return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇæÇ≥Ç¢ÇÊÇ£"))                     return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇæÇ≥Ç¢ÇÊ"))                       return set_info(info, T_KANA);
            if (lexeme("Ç≠ÇæÇ≥Ç¢"))                         return set_info(info, T_KANA);
            if (lexeme("Ç≠"))                               return set_info(info, T_KYUU);
            if (lexeme("Ç¨Ç·Ç≠ÇÊÇ∞ÇÒ"))                     return set_info(info, T_ACOS);
            if (lexeme("Ç¨Ç·Ç≠ÇΩÇÒÇ∫ÇÒÇ∆"))                 return set_info(info, T_ATAN);
            if (lexeme("Ç¨Ç·Ç≠ÇΩÇÒÇ∂Ç•ÇÒÇ∆"))               return set_info(info, T_ATAN);
            if (lexeme("Ç¨Ç·Ç≠ÇπÇ¢ÇπÇ¬"))                   return set_info(info, T_ATAN);
            if (lexeme("Ç¨Ç·Ç≠ÇπÇ¢Ç∞ÇÒ"))                   return set_info(info, T_ASIN);
            if (lexeme("Ç¨Ç·Ç≠Ç∑Ç§"))                       return set_info(info, T_GYAKUSUU);
            if (lexeme("Ç¨Ç·Ç≠Ç≥Ç¢ÇÒ"))                     return set_info(info, T_ASIN);
            if (lexeme("Ç¨Ç·Ç≠Ç±Ç≥Ç¢ÇÒ"))                   return set_info(info, T_ACOS);
            if (lexeme("Ç´Ç„Å["))                           return set_info(info, T_KYUU);
            if (lexeme("Ç´Ç„Ç§"))                           return set_info(info, T_KYUU);
            if (lexeme("Ç™Ç¢"))                             return set_info(info, T_GAI);
            if (lexeme("Ç™"))                               return set_info(info, T_HA);
            if (lexeme("Ç©Å["))                             return set_info(info, T_KANA);
            if (lexeme("Ç©ÇÒ"))                             return set_info(info, T_KAN);
            if (lexeme("Ç©ÇÁ"))                             return set_info(info, T_KARA);
            if (lexeme("Ç©ÇÀÅ["))                           return set_info(info, T_KANA);
            if (lexeme("Ç©ÇÀÇ¶"))                           return set_info(info, T_KANA);
            if (lexeme("Ç©ÇÀÇ•"))                           return set_info(info, T_KANA);
            if (lexeme("Ç©ÇÀ"))                             return set_info(info, T_KANA);
            if (lexeme("Ç©Ç»Å["))                           return set_info(info, T_KANA);
            if (lexeme("Ç©Ç»Ç†"))                           return set_info(info, T_KANA);
            if (lexeme("Ç©Ç»Çü"))                           return set_info(info, T_KANA);
            if (lexeme("Ç©Ç»"))                             return set_info(info, T_KANA);
            if (lexeme("Ç©Ç¡Ç±ÇÇ∆Ç∂ÇÈ"))                   return set_info(info, T_R_PAREN);
            if (lexeme("Ç©Ç¡Ç±ÇÇ∆Ç∂Çƒ"))                   return set_info(info, T_R_PAREN);
            if (lexeme("Ç©Ç¡Ç±Ç∆Ç∂ÇÈ"))                     return set_info(info, T_R_PAREN);
            if (lexeme("Ç©Ç¡Ç±Ç∆Ç∂Çƒ"))                     return set_info(info, T_R_PAREN);
            if (lexeme("Ç©Ç¡Ç±Ç∆Ç∂"))                       return set_info(info, T_R_PAREN);
            if (lexeme("Ç©Ç¡Ç±"))                           return set_info(info, T_L_PAREN);
            if (lexeme("Ç©Ç∏"))                             return set_info(info, T_MONO);
            if (lexeme("Ç©Ç∑Ç§"))                           return set_info(info, T_KASUU);
            if (lexeme("Ç©Ç≥ÇÒ"))                           return set_info(info, T_TASHIZAN);
            if (lexeme("Ç©ÇØÇÎÇÊ"))                         return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇÎÇ‚"))                         return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇÎ"))                           return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇÍÇŒ"))                         return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇÈÇ∆Ç´ÇÃ"))                     return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇÈÇ∆Ç´"))                       return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇÈÇ∆"))                         return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇÈÇ±Ç∆ÇÃ"))                     return set_info(info, T_KAKERU);
            if (lexeme("Ç©ÇØÇÈ"))                           return set_info(info, T_KAKERU);
            if (lexeme("Ç©ÇØÇÁÇÍÇÈ"))                       return set_info(info, T_KAKERARERU);
            if (lexeme("Ç©ÇØÇ»Ç≥Ç¢"))                       return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇƒÇ›ÇÊ"))                       return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇƒÇ›Ç¢"))                       return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇƒÇ›Ç°"))                       return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇƒÇ›"))                         return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇƒ"))                           return set_info(info, T_KAKETE);
            if (lexeme("Ç©ÇØÇΩÇÁ"))                         return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇΩÇ∆Ç´ÇÃ"))                     return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇΩÇ∆Ç´"))                       return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇΩ"))                           return set_info(info, T_KAKETA);
            if (lexeme("Ç©ÇØÇ¥ÇÒ"))                         return set_info(info, T_KAKEZAN);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇÎÇÊ"))                   return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇÎÇ‚"))                   return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇÎ"))                     return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇÍÇŒ"))                   return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇÈÇ∆Ç´"))                 return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇÈÇ∆"))                   return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇÈ"))                     return set_info(info, T_KAKERU);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇÊ"))                     return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇ»Ç≥Ç¢"))                 return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇƒÇ›ÇÊ"))                 return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇƒÇ›Ç¢"))                 return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇƒÇ›Ç°"))                 return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇƒÇ›"))                   return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇƒ"))                     return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇΩÇ∆Ç´ÇÃ"))               return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇΩÇ∆Ç´"))                 return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπÇΩ"))                     return set_info(info, T_KAKETA);
            if (lexeme("Ç©ÇØÇ†ÇÌÇπ"))                       return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇ∑Ç∆Ç´ÇÃ"))                 return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇ∑Ç∆Ç´"))                   return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇ∑"))                       return set_info(info, T_KAKERU);
            if (lexeme("Ç©ÇØÇ†ÇÌÇµÇΩÇ∆Ç´ÇÃ"))               return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇµÇΩÇ∆Ç´"))                 return set_info(info, T_KAKERUTO);
            if (lexeme("Ç©ÇØÇ†ÇÌÇ≥ÇÍÇÈ"))                   return set_info(info, T_KAKERARERU);
            if (lexeme("Ç©ÇØ"))                             return set_info(info, T_KAKERU);
            if (lexeme("Ç©Ç¢Ç∂ÇÂÇ§"))                       return set_info(info, T_KAIJOU);
            if (lexeme("Ç©Ç¢"))                             return set_info(info, T_KANA);
            if (lexeme("Ç©Ç†"))                             return set_info(info, T_KANA);
            if (lexeme("Ç©Çü"))                             return set_info(info, T_KANA);
            if (lexeme("Ç©"))                               return set_info(info, T_KA);
            if (lexeme("Ç®ÇÀÇ™Ç¢ÇÊ"))                       return set_info(info, T_ONEGAI);
            if (lexeme("Ç®ÇÀÇ™Ç¢Ç‚ÇÀÇÒ"))                   return set_info(info, T_ONEGAI);
            if (lexeme("Ç®ÇÀÇ™Ç¢Ç∑ÇÈ"))                     return set_info(info, T_ONEGAI);
            if (lexeme("Ç®ÇÀÇ™Ç¢ÇµÇ‹Ç∑ÇÊ"))                 return set_info(info, T_ONEGAI);
            if (lexeme("Ç®ÇÀÇ™Ç¢ÇµÇ‹Ç∑ÇÀ"))                 return set_info(info, T_ONEGAI);
            if (lexeme("Ç®ÇÀÇ™Ç¢ÇµÇ‹Ç∑"))                   return set_info(info, T_ONEGAI);
            if (lexeme("Ç®ÇÀÇ™Ç¢Ç¢ÇΩÇµÇ‹Ç∑ÇÊ"))             return set_info(info, T_ONEGAI);
            if (lexeme("Ç®ÇÀÇ™Ç¢Ç¢ÇΩÇµÇ‹Ç∑ÇÀ"))             return set_info(info, T_ONEGAI);
            if (lexeme("Ç®ÇÀÇ™Ç¢Ç¢ÇΩÇµÇ‹Ç∑"))               return set_info(info, T_ONEGAI);
            if (lexeme("Ç®ÇÀÇ™Ç¢"))                         return set_info(info, T_ONEGAI);
            if (lexeme("Ç®ÇµÇ¶ÇÎÇÊ"))                       return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇÎÇ‚"))                       return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇÎ"))                         return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇÊ"))                         return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶Ç»Ç≥Ç¢"))                     return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇÒ"))                       return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇÊ"))                       return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇ‚"))                       return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇ›ÇÊ"))                     return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇ›Ç¢"))                     return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇ›Ç°"))                     return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇ›"))                       return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇŸÇµÇ¢ÇÀÇÒ"))               return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇøÇÂÇ§ÇæÇ¢ÇÊ"))             return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇøÇÂÇ§ÇæÇ¢"))               return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇ≠ÇÍÇÈÇ©Ç¢"))               return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇ≠ÇÍÇÈÇ©"))                 return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇ≠ÇÍÇÈ"))                   return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇ≠ÇÍ"))                     return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇ≠ÇæÇ≥Ç¢ÇÊ"))               return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶ÇƒÇ≠ÇæÇ≥Ç¢"))                 return set_info(info, T_OSHIETE);
            if (lexeme("Ç®ÇµÇ¶Çƒ"))                         return set_info(info, T_OSHIETE);
            if (lexeme("Ç®Ç≠"))                             return set_info(info, T_OKU);
            if (lexeme("Ç¶ÇÒÇµÇ„Ç§ÇËÇ¬"))                   return set_info(info, T_PI);
            if (lexeme("Ç¢Å["))                             return set_info(info, T_E);
            if (lexeme("Ç¢Ç¬"))                             return set_info(info, T_GO);
            if (lexeme("Ç¢Ç¡"))                             return set_info(info, T_ICHI);
            if (lexeme("Ç¢ÇøÇŒÇÒÇøÇ¢Ç≥Ç¢Ç‡ÇÃ"))             return set_info(info, T_MIN);
            if (lexeme("Ç¢ÇøÇŒÇÒÇøÇ¢Ç≥Ç¢Ç©Ç∏"))             return set_info(info, T_MIN);
            if (lexeme("Ç¢ÇøÇŒÇÒÇ®Ç®Ç´Ç¢Ç‡ÇÃ"))             return set_info(info, T_MAX);
            if (lexeme("Ç¢ÇøÇŒÇÒÇ®Ç®Ç´Ç¢Ç©Ç∏"))             return set_info(info, T_MAX);
            if (lexeme("Ç¢Çø"))                             return set_info(info, T_ICHI);
            if (lexeme("Ç¢Çª"))                             return set_info(info, T_ISO);
            if (lexeme("Ç¢Ç≠ÇÁÇ…Ç»ÇÈÇ≈ÇµÇÂÇ§"))             return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠ÇÁÇ…Ç»ÇÈ"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠ÇÁÇ…Ç»ÇËÇ‹Ç∑"))                 return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠ÇÁÇ≈Ç¡"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠ÇÁÇ≈Ç∑"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠ÇÁÇ≈Ç†ÇÈ"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠ÇÁÇæÇÎÇ§"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠ÇÁ"))                           return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç‚"))                         return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç…Ç»ÇÈÇ≈ÇµÇÂÇ§"))             return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç…Ç»ÇÈ"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç…Ç»ÇËÇ‹Ç∑"))                 return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç»ÇÒÇ≈Ç¡"))                   return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç»ÇÒÇ≈Ç∑"))                   return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç»ÇÒÇ≈ÇµÇÂÇ§"))               return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç»ÇÒ"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç»ÇÃÇ≈Ç¡"))                   return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç»ÇÃÇ≈Ç∑"))                   return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç»ÇÃÇ≈ÇµÇÂÇ§"))               return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç»ÇÃ"))                       return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬Ç≈Ç†ÇÈ"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬ÇæÇÎÇ§"))                     return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç≠Ç¬"))                           return set_info(info, T_IKURA);
            if (lexeme("Ç¢Ç®"))                             return set_info(info, T_IO);
            if (lexeme("Ç¢Ç¢"))                             return set_info(info, T_GO);
            if (lexeme("Ç†Å[Ç≠ÇΩÇÒÇ∫ÇÒÇ∆"))                 return set_info(info, T_ATAN);
            if (lexeme("Ç†Å[Ç≠ÇΩÇÒÇ∂Ç•ÇÒÇ∆"))               return set_info(info, T_ATAN);
            if (lexeme("Ç†Å[Ç≠Ç≥Ç¢ÇÒ"))                     return set_info(info, T_ASIN);
            if (lexeme("Ç†Å[Ç≠Ç±Ç≥Ç¢ÇÒ"))                   return set_info(info, T_ACOS);
            if (lexeme("Ç†Ç‹ÇË"))                           return set_info(info, T_AMARI);
            if (lexeme("Ç†ÇªÇ§Ç¨"))                         return set_info(info, T_ASOUGI);
            if (lexeme("Ål"))                               return set_info(info, T_R_PAREN);
            if (lexeme("Åk"))                               return set_info(info, T_L_PAREN);
            if (lexeme("Åz"))                               return set_info(info, T_R_PAREN);
            if (lexeme("Åy"))                               return set_info(info, T_L_PAREN);
            if (lexeme("Åx"))                               return set_info(info, T_R_PAREN);
            if (lexeme("Åw"))                               return set_info(info, T_L_PAREN);
            if (lexeme("Åv"))                               return set_info(info, T_R_PAREN);
            if (lexeme("Åu"))                               return set_info(info, T_L_PAREN);
            if (lexeme("Åt"))                               return set_info(info, T_R_PAREN);
            if (lexeme("Ås"))                               return set_info(info, T_L_PAREN);
            if (lexeme("År"))                               return set_info(info, T_R_PAREN);
            if (lexeme("Åq"))                               return set_info(info, T_L_PAREN);
            if (lexeme("ÅZ"))                               return set_info(info, T_ZERO);
            if (lexeme("ÅB"))                               return set_info(info, T_PERIOD);
            if (lexeme("ÅA"))                               return set_info(info, T_COMMA);
            if (lexeme("Åô"))                               return set_info(info, T_PERIOD);
            if (lexeme("Åö"))                               return set_info(info, T_PERIOD);
            if (lexeme("Åú"))                               return set_info(info, T_PERIOD);
            if (lexeme("Åù"))                               return set_info(info, T_PERIOD);
            if (lexeme("ÅÄ"))                               return set_info(info, T_WARU);
            if (lexeme("Å~"))                               return set_info(info, T_KAKERU);
            if (lexeme("~"))                                return set_info(info, T_KARA);
            if (lexeme("}"))                                return set_info(info, T_R_PAREN);
            if (lexeme("{"))                                return set_info(info, T_L_PAREN);
            if (lexeme("tanh"))                             return set_info(info, T_TANH);
            if (lexeme("tan"))                              return set_info(info, T_TAN);
            if (lexeme("sinh"))                             return set_info(info, T_SINH);
            if (lexeme("sin"))                              return set_info(info, T_SIN);
            if (lexeme("log10"))                            return set_info(info, T_LOG10);
            if (lexeme("log"))                              return set_info(info, T_LOG);
            if (lexeme("ln"))                               return set_info(info, T_LOG);
            if (lexeme("fabs"))                             return set_info(info, T_ZETTAICHI);
            if (lexeme("exp"))                              return set_info(info, T_EXP);
            if (lexeme("cosh"))                             return set_info(info, T_COSH);
            if (lexeme("cos"))                              return set_info(info, T_COS);
            if (lexeme("atan"))                             return set_info(info, T_ATAN);
            if (lexeme("asin"))                             return set_info(info, T_ASIN);
            if (lexeme("arctan"))                           return set_info(info, T_ATAN);
            if (lexeme("arcsin"))                           return set_info(info, T_ASIN);
            if (lexeme("arccos"))                           return set_info(info, T_ACOS);
            if (lexeme("acos"))                             return set_info(info, T_ACOS);
            if (lexeme("abs"))                              return set_info(info, T_ZETTAICHI);
            if (lexeme("]"))                                return set_info(info, T_R_PAREN);
            if (lexeme("["))                                return set_info(info, T_L_PAREN);
            if (lexeme("?"))                                return set_info(info, T_PERIOD);
            if (lexeme("=="))                               return set_info(info, T_HA);
            if (lexeme("="))                                return set_info(info, T_HA);
            if (lexeme("/"))                                return set_info(info, T_WARU);
            if (lexeme("."))                                return set_info(info, T_PERIOD);
            if (lexeme("-"))                                return set_info(info, T_MINUS);
            if (lexeme(","))                                return set_info(info, T_COMMA);
            if (lexeme("+"))                                return set_info(info, T_TASU);
            if (lexeme("*"))                                return set_info(info, T_KAKERU);
            if (lexeme(")"))                                return set_info(info, T_R_PAREN);
            if (lexeme("("))                                return set_info(info, T_L_PAREN);
            if (lexeme("%"))                                return set_info(info, T_PERCENT);
            if (lexeme("!"))                                return set_info(info, T_FACTORIAL);
            // ÅyÇ±Ç±Ç‹Ç≈ÅzçsÇç~èáÇ…ï¿Ç—ë÷Ç¶ÇƒÇ®Ç≠ÅB

            char ch = getch();
            if (ch == EOF)
                return commit_token(eof);

            std::string str;
            do
            {
                str += ch;
                ch = getch();
            } while (ch != EOF);

            message(str + "Ç™ÇÌÇ©ÇËÇ‹ÇπÇÒÅB");

            return commit_token(eof);
        }   // get_token

    protected:
        char getch()
        {
            char c;

            if (m_buff.size() == m_index)
            {
                if (m_current == m_end)
                {
                    c = EOF;
                }
                else
                {
                    c = *m_current++;
                    m_buff.push_back(c);
                    m_index++;
                }
            }
            else
            {
                c = m_buff[m_index++];
            }

            return c;
        }   // getch

        void ungetch()
        {
            assert(m_index);
            if (0 < m_index)
                m_index--;
        }

        void commit()
        {
            using namespace std;
            if (m_index)
            {
                m_saved_str.assign(m_buff.begin(), m_buff.begin() + m_index);
                m_buff.erase(m_buff.begin(), m_buff.begin() + m_index);
                m_index = 0;
            }
        }

        Token commit_token(Token token)
        {
            commit();
            return token;
        }

        Token set_info(info_type& info, Token token)
        {
            info.text() = m_saved_str;
            return token;
        }

        bool lexeme(const char* s, bool do_commit = true)
        {
            char c;
            std::size_t n = 1;
            while (*s)
            {
                c = getch();
                if (c == *s)
                {
                    s++; n++;
                }
                else if (c == EOF)
                {
                    return false;
                }
                else
                {
                    assert(n <= m_index);
                    m_index -= n;
                    return false;   // closed
                }
            }
            if (*s == 0)
            {
                if (do_commit)
                {
                    commit();
                }
                else
                {
                    --n;
                    assert(n <= m_index);
                    m_index -= n;
                }
                return true;    // closed
            }
            return false;   // closed
        }   // lexeme

        void newline()
        {
            ++location();
        }

    protected:
        parser_site_type&       m_parser_site;
        std::size_t             m_index;
        std::vector<char>       m_buff;
        std::string             m_saved_str;

        iterator_type           m_begin;
        iterator_type           m_current;
        iterator_type           m_end;

        CH_Location& location()
        {
            return m_parser_site.location();
        }

        const CH_Location& location() const
        {
            return m_parser_site.location();
        }

        void message(const std::string& str)
        {
            m_parser_site.message(str);
        }

        // êÃÇÃêîÇÃêîÇ¶ï˚Çç°ïóÇ…ïœä∑Ç∑ÇÈÅB
        // ÅuÇ©Ç∑Ç§ÅvÅuÇ–Ç©Ç∑Ç§ÅvÇ»Ç«ÇÅuÇΩÇ∑Ç©Ç∏ÅvÅuÇΩÇ≥ÇÍÇÈÇ©Ç∏ÅvÇ»Ç«Ç…ïœä∑Ç∑ÇÈÅB
        void resynth0(std::vector<info_type>& infos)
        {
            std::vector<info_type> newinfos;
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_HATA:
                    it->set_token(T_NI);
                    newinfos.push_back(*it);
                    it->set_token(T_JUU);
                    newinfos.push_back(*it);
                    break;

                case T_YAO:
                    it->set_token(T_HACHI);
                    newinfos.push_back(*it);
                    it->set_token(T_HYAKU);
                    newinfos.push_back(*it);
                    break;

                case T_IO:
                    it->set_token(T_GO);
                    newinfos.push_back(*it);
                    it->set_token(T_HYAKU);
                    newinfos.push_back(*it);
                    break;

                case T_ISO:
                    it->set_token(T_GO);
                    newinfos.push_back(*it);
                    it->set_token(T_JUU);
                    newinfos.push_back(*it);
                    break;

                case T_YOSO:
                    it->set_token(T_YON);
                    newinfos.push_back(*it);
                    it->set_token(T_JUU);
                    newinfos.push_back(*it);
                    break;

                case T_KANA:
                    if (it->text() == "Ç‚")
                    {
                        if ((it + 1)->get_token() == T_JUU ||
                            (it + 1)->get_token() == T_MAN)
                        {
                            it->set_token(T_HACHI);
                        }
                    }
                    newinfos.push_back(*it);
                    break;

                case T_KASUU:
                    it->set_token(T_TASU);
                    newinfos.push_back(*it);
                    it->set_token(T_MONO);
                    newinfos.push_back(*it);
                    break;

                case T_HIKASUU:
                    it->set_token(T_TASARERU);
                    newinfos.push_back(*it);
                    it->set_token(T_MONO);
                    newinfos.push_back(*it);
                    break;

                case T_GENSUU:
                    it->set_token(T_HIKU);
                    newinfos.push_back(*it);
                    it->set_token(T_MONO);
                    newinfos.push_back(*it);
                    break;

                case T_HIGENSUU:
                    it->set_token(T_HIKARERU);
                    newinfos.push_back(*it);
                    it->set_token(T_MONO);
                    newinfos.push_back(*it);
                    break;

                case T_JOUSUU:
                    it->set_token(T_KAKERU);
                    newinfos.push_back(*it);
                    it->set_token(T_MONO);
                    newinfos.push_back(*it);
                    break;

                case T_HIJOUSUU:
                    it->set_token(T_KAKERARERU);
                    newinfos.push_back(*it);
                    it->set_token(T_MONO);
                    newinfos.push_back(*it);
                    break;

                case T_JOSUU:
                    it->set_token(T_WARU);
                    newinfos.push_back(*it);
                    it->set_token(T_MONO);
                    newinfos.push_back(*it);
                    break;

                case T_HIJOSUU:
                    it->set_token(T_WARARERU);
                    newinfos.push_back(*it);
                    it->set_token(T_MONO);
                    newinfos.push_back(*it);
                    break;

                default:
                    newinfos.push_back(*it);
                }
            }
            infos = newinfos;
        }

        // T_PERIOD, T_COMMAÇêÆóùÇµÇƒÅAT_MIRUTO, T_ALLÇçÌèúÇ∑ÇÈÅB
        // T_SONOÇÅuT_SORE, T_NO1ÅvÇ…íuÇ´ä∑Ç¶ÇÈÅB
        void resynth1(std::vector<info_type>& infos)
        {
            std::vector<info_type> newinfos;
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();

            while (it->get_token() == T_PERIOD ||
                   it->get_token() == T_COMMA ||
                   it->get_token() == T_HA)
            {
                ++it;
            }

            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_SONO:
                    it->set_token(T_SORE);
                    newinfos.push_back(*it);
                    it->set_token(T_NO1);
                    newinfos.push_back(*it);
                    break;

                case T_MIRUTO:
                case T_ALL:
                    continue;

                case T_PERIOD:
                    newinfos.push_back(*it);
                    do
                    {
                        ++it;
                    } while (it->get_token() == T_PERIOD);
                    --it;
                    continue;

                case T_COMMA:
                    newinfos.push_back(*it);
                    do
                    {
                        ++it;
                    } while (it->get_token() == T_COMMA);
                    --it;
                    continue;

                default:
                    newinfos.push_back(*it);
                }
            }
            infos = newinfos;
        }

        // äáå ÇÃëŒâûÇèCê≥Ç∑ÇÈÅB
        bool resynth2(std::vector<info_type>& infos)
        {
            std::vector<info_type> newinfos;
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            info_type info;
            int nest = 0;
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_L_PAREN:
                    ++nest;
                    assert(nest >= 0);
                    break;

                case T_R_PAREN:
                    --nest;
                    if (nest < 0)
                    {
                        message("Ç©Ç¡Ç±ÇÃëŒâûÇ™Ç®Ç©ÇµÇ¢Ç≈Ç∑ÅB");
                        return false;
                    }
                    break;

                case T_HA:
                case T_PERIOD:
                case eof:
                    info = *it;
                    for (info.set_token(T_R_PAREN); nest > 0; --nest)
                        newinfos.push_back(info);
                    break;

                default:
                    break;
                }
                newinfos.push_back(*it);
            }
            infos = newinfos;
            return true;
        }

        // ÅuÇÃÅvÇT_NO1, T_NO2, ..., T_NO7Ç…ï™óﬁÇ∑ÇÈÅB
        // êîÇÃíPà ÅuèıÅvÇT_JOU2Ç…ï™óﬁÇ∑ÇÈÅB
        // T_NO2: ÅuÇÌÅvÅuÇ≥ÅvÅuÇπÇ´ÅvÅuÇµÇÂÇ§ÅvÇÃÅuÇÃÅvÅB
        // T_NO3: ÅuâΩÇÃâΩî{ÅvÇÃÅuÇÃÅvÅBÅuâΩÇÃÅi...ÅjÅvÇÃÅuÇÃÅvÅB
        // T_NO4: ÅuÇ©ÇØÇ¥ÇÒÅvÅuÇØÇ¢Ç≥ÇÒÅvÅuÇ±ÇΩÇ¶ÅvÇ»Ç«ÇÃíºëOÇÃÅuÇÃÅvÅB
        // T_NO5: ÅuÇÃÇΩÇ∑Ç©Ç∏ÅvÅuÇÃÇΩÇ≥ÇÍÇÈÇ©Ç∏ÅvÅuÇÃÇ©ÇØÇÈÇ©Ç∏ÅvÇÃÅuÇÃÅv
        // T_NO6: ÅuÇÃâΩèÊÅvÅuÇÃïΩï˚ÅvÅuÇÃóßï˚ÅvÇÃÅuÇÃÅvÅB
        // T_NO7: éOäpä÷êîÅuê≥å∑ÅvÅuó]å∑ÅvÅuê≥ê⁄ÅvÇÃíºëOÇÃÅuÇÃÅvÅB
        // T_NO8: ÅuÇÃâΩÇœÅ[ÇπÇÒÇ∆ÅvÇÃÅuÇÃÅvÅB
        // T_NO9: ÅuÇÃó]ÇËÅvÇÃÅuÇÃÅvÅB
        // T_NO1: ÇªÇÍà»äOÅB
        void resynth3(std::vector<info_type>& infos)
        {
            std::vector<info_type> newinfos;
            std::vector<info_type> subinfos;
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            int nest;
            std::size_t no1 = std::string::npos;    // position of T_NO1
            std::size_t jou1 = std::string::npos;   // position of T_JOU1
            std::size_t wo1 = std::string::npos;    // position of T_WO1
            bool flag = false;
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_L_PAREN:
                    newinfos.push_back(*it);
                    subinfos.clear();
                    ++it;
                    for (nest = 1; it != end; ++it)
                    {
                        switch (it->get_token())
                        {
                        case T_L_PAREN:
                            ++nest;
                            subinfos.push_back(*it);
                            continue;

                        case T_R_PAREN:
                            --nest;
                            if (nest == 0)
                                break;
                            subinfos.push_back(*it);
                            continue;

                        default:
                            subinfos.push_back(*it);
                            continue;
                        }
                        break;
                    }
                    //show_tokens(subinfos.begin(), subinfos.end());
                    resynth2(subinfos);
                    //show_tokens(subinfos.begin(), subinfos.end());
                    newinfos.insert(newinfos.end(), subinfos.begin(), subinfos.end());
                    break;

                case T_NO1:
                    no1 = std::distance(infos.begin(), it);
                    jou1 = std::string::npos;
                    flag = false;
                    break;

                case T_WO1:
                    wo1 = std::distance(infos.begin(), it);
                    jou1 = std::string::npos;
                    flag = false;
                    break;

                case T_COUNT:
                case T_SUM:
                case T_DIFF:
                case T_PROD:
                case T_QUOT:
                case T_MAX:
                case T_MIN:
                case T_AVERAGE:
                case T_HEIHOUKON:
                    if (no1 != std::string::npos)
                    {
                        (newinfos.begin() + no1)->set_token(T_NO2);
                        no1 = std::string::npos;
                    }
                    jou1 = std::string::npos;
                    break;

                case T_KAIJOU:
                    if (no1 != std::string::npos)
                    {
                        (newinfos.begin() + no1)->set_token(T_NO6);
                        no1 = std::string::npos;
                    }
                    jou1 = std::string::npos;
                    break;

                case T_BAI:
                    if (no1 != std::string::npos)
                    {
                        (newinfos.begin() + no1)->set_token(T_NO3);
                        no1 = std::string::npos;
                        if (jou1 != std::string::npos &&
                            newinfos[jou1].get_token() == T_JOU1)
                        {
                            newinfos[jou1].set_token(T_JOU2);
                            jou1 = std::string::npos;
                        }
                    }
                    flag = false;
                    break;

                case T_TASHIZAN:
                case T_HIKIZAN:
                case T_KAKEZAN:
                case T_WARIZAN:
                case T_KEISAN:
                case T_KOTAE:
                    if (no1 != std::string::npos)
                    {
                        (newinfos.begin() + no1)->set_token(T_NO4);
                        no1 = std::string::npos;
                    }
                    jou1 = std::string::npos;
                    flag = false;
                    break;

                case T_TASU:
                case T_KAKERU:
                case T_HIKU:
                case T_WARU:
                case T_TASARERU:
                case T_KAKERARERU:
                case T_HIKARERU:
                case T_WARARERU:
                    if (no1 != std::string::npos)
                    {
                        (newinfos.begin() + no1)->set_token(T_NO5);
                        no1 = std::string::npos;
                    }
                    jou1 = std::string::npos;
                    flag = false;
                    break;

                case T_PERCENT:
                    if (no1 != std::string::npos)
                    {
                        (newinfos.begin() + no1)->set_token(T_NO8);
                        no1 = std::string::npos;
                    }
                    flag = false;
                    break;

                case T_JOU1:
                    if (no1 != std::string::npos)
                    {
                        if (jou1 != std::string::npos &&
                            newinfos[jou1].get_token() == T_JOU1)
                        {
                            newinfos[jou1].set_token(T_JOU2);
                        }
                        (newinfos.begin() + no1)->set_token(T_NO6);
                        jou1 = std::distance(infos.begin(), it);
                    }
                    else if (wo1 != std::string::npos)
                    {
                        if (jou1 != std::string::npos &&
                            newinfos[jou1].get_token() == T_JOU1)
                        {
                            newinfos[jou1].set_token(T_JOU2);
                        }
                        wo1 = std::string::npos;
                        jou1 = std::distance(infos.begin(), it);
                    }
                    else if (jou1 != std::string::npos)
                    {
                        (newinfos.begin() + jou1)->set_token(T_JOU2);
                    }
                    else if (!flag)
                    {
                        it->set_token(T_JOU2);
                    }
                    flag = false;
                    break;

                case T_HEIHOU:
                case T_RIPPOU:
                    if (no1 != std::string::npos)
                    {
                        (newinfos.begin() + no1)->set_token(T_NO6);
                        no1 = std::string::npos;
                    }
                    jou1 = std::string::npos;
                    flag = false;
                    break;

                case T_AMARI:
                    if (no1 != std::string::npos)
                    {
                        (newinfos.begin() + no1)->set_token(T_NO9);
                        no1 = std::string::npos;
                    }
                    jou1 = std::string::npos;
                    flag = false;
                    break;

                case T_SIN:
                case T_COS:
                case T_TAN:
                case T_ASIN:
                case T_ACOS:
                case T_ATAN:
                case T_SINH:
                case T_COSH:
                case T_TANH:
                case T_ROOT:
                case T_ZETTAICHI:
                case T_GYAKUSUU:
                    if (no1 != std::string::npos)
                    {
                        (newinfos.begin() + no1)->set_token(T_NO7);
                    }
                    jou1 = std::string::npos;
                    flag = true;
                    break;

                default:
                    break;
                }
                newinfos.push_back(*it);
            }
            infos = newinfos;
        }

        // è¨êîì_ÇÃå„ÇÃêîéöÇ…ÇµÇÈÇµÇÇ¬ÇØÇÈÅB
        void resynth4(std::vector<info_type>& infos)
        {
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            bool dot = false;
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_DOT:
                    dot = true;
                    break;

                case T_ZERO:    if (dot) it->set_token(T_DIGIT0); break;
                case T_ICHI:    if (dot) it->set_token(T_DIGIT1); break;
                case T_NI:      if (dot) it->set_token(T_DIGIT2); break;
                case T_SAN:     if (dot) it->set_token(T_DIGIT3); break;
                case T_YON:     if (dot) it->set_token(T_DIGIT4); break;
                case T_GO:      if (dot) it->set_token(T_DIGIT5); break;
                case T_ROKU:    if (dot) it->set_token(T_DIGIT6); break;
                case T_NANA:    if (dot) it->set_token(T_DIGIT7); break;
                case T_HACHI:   if (dot) it->set_token(T_DIGIT8); break;
                case T_KYUU:    if (dot) it->set_token(T_DIGIT9); break;

                default:
                    dot = false;
                    break;
                }
            }
        }

        // ÅuÇ∆ÅvÇT_TO1, T_TO2Ç…ï™óﬁÇ∑ÇÈÅB
        // T_TO2: ÅuÇ»ÇÒÇ∆Ç»ÇÒÇ‘ÇÒÇÃÇ»Ç…ÅvÇÃÅuÇ∆ÅvÅB
        // T_TO1: ÇªÇÍà»äOÅB
        void resynth5(std::vector<info_type>& infos)
        {
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            std::vector<info_type>::iterator it_save = end;
            int flag = 0;
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_TO1:
                    if (flag != 2)
                        it_save = it;
                    flag = 0;
                    break;

                case T_ICHI:
                case T_NI:
                case T_SAN:
                case T_YON:
                case T_GO:
                case T_ROKU:
                case T_NANA:
                case T_HACHI:
                case T_KYUU:
                case T_JUU:
                case T_HYAKU:
                case T_SEN:
                case T_MAN:
                case T_OKU:
                case T_CHOU:
                case T_KEI:
                    if (flag == 1)
                        flag = 2;
                    break;

                case T_BUNNO:
                    if (it_save != end)
                    {
                        it_save->set_token(T_TO2);
                        it_save = end;
                    }
                    flag = 1;
                    break;

                default:
                    it_save = end;
                    flag = 0;
                    break;
                }
            }
        }

        // ì¡íËÇÃåÍãÂÇÃíºå„ÇÃT_COMMAÇçÌèúÇ∑ÇÈÅB
        void resynth6(std::vector<info_type>& infos)
        {
            std::vector<info_type> newinfos;
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            std::vector<info_type>::iterator it2;
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_AMARI:
                case T_BAI:
                case T_BUNNO:
                case T_DE:
                case T_DIFF:
                case T_HA:
                case T_HEIHOU:
                case T_HEIHOUKON:
                case T_KAIJOU:
                case T_HIITE:
                case T_HIKIZAN:
                case T_HIKU:
                case T_HIKUTO:
                case T_IKURA:
                case T_KAKERU:
                case T_KAKERUTO:
                case T_KAKETE:
                case T_KAKEZAN:
                case T_KANA:
                case T_KARA:
                case T_KEISAN:
                case T_KOTAE:
                case T_L_PAREN:
                case T_MINUS:
                case T_NO1:
                case T_NO2:
                case T_NO3:
                case T_NO4:
                case T_NO5:
                case T_NO6:
                case T_NO7:
                case T_NO8:
                case T_NO9:
                case T_NOUCHI:
                case T_OSHIETE:
                case T_PERCENT:
                case T_PLUS:
                case T_PROD:
                case T_QUOT:
                case T_SHITA:
                case T_SHITE:
                case T_SUM:
                case T_SURUTO:
                case T_TASHITE:
                case T_TASHIZAN:
                case T_TASU:
                case T_TASUTO:
                case T_TO1:
                case T_WARIZAN:
                case T_WARU:
                case T_WARUTO:
                case T_WATTE:
                case T_WO1:
                case T_WO2:
                //case T_NI:    // NOTE: T_NIÇÕÅAêîéöÇ©Ç‡ÇµÇÍÇ»Ç¢ÅB
                    it2 = it;
                    it2++;
                    if (it2->get_token() == T_COMMA)
                    {
                        newinfos.push_back(*it);
                        it = it2;
                        continue;
                    }
                    break;

                default:
                    break;
                }
                newinfos.push_back(*it);
            }
            infos = newinfos;
        }

        // ÅuåvéZÇµÅvÅuÇÇµÅvÇ»Ç«ÇÃÅuÇµÅvÇèCê≥Ç∑ÇÈÅB
        void resynth7(std::vector<info_type>& infos)
        {
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            bool flag = false;
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_TASHIZAN:
                case T_HIKIZAN:
                case T_KAKEZAN:
                case T_WARIZAN:
                case T_KEISAN:
                case T_PLUS:
                case T_MINUS:
                case T_WO1:
                case T_WO2:
                    flag = true;
                    break;

                case T_YON:
                    if (flag && it->text() == "Çµ")
                    {
                        flag = false;
                        it->set_token(T_SHITE);
                    }
                    break;

                default:
                    flag = false;
                    break;
                }
            }
        }

        // ÅuÇÅvÇT_WO1Ç∆T_WO2Ç…ï™óﬁÇ∑ÇÈÅB
        // T_WO2: ÅuÇΩÇµÇ¥ÇÒÅvÅuÇØÇ¢Ç≥ÇÒÅvÇ»Ç«ÇÃíºå„ÇÃÅuÇÅvÅB
        // T_WO1: ÇªÇÃÇŸÇ©ÇÃÅuÇÅvÅB
        void resynth8(std::vector<info_type>& infos)
        {
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            bool flag = false;
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_TASHIZAN:
                case T_HIKIZAN:
                case T_KAKEZAN:
                case T_WARIZAN:
                case T_KEISAN:
                    flag = true;
                    break;

                case T_WO1:
                    if (flag)
                    {
                        flag = false;
                        it->set_token(T_WO2);
                    }
                    break;

                default:
                    flag = false;
                    break;
                }
            }
        }

        // ÅuÇÅvÇÃíºå„Ç…ÅuÇØÇ¢Ç≥ÇÒÅvÅuÇΩÇµÇ¥ÇÒÅvÇ»Ç«Ç™Ç†ÇÍÇŒÅA
        // ÅuÇÅvÇÅuÇÃÅvÇ…ïœÇ¶ÇÈÅB
        void resynth9(std::vector<info_type>& infos)
        {
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            std::vector<info_type>::iterator it_save = end;
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_TASHIZAN:
                case T_HIKIZAN:
                case T_KAKEZAN:
                case T_WARIZAN:
                case T_KEISAN:
                    if (it_save != end)
                    {
                        it_save->set_token(T_NO4);
                    }
                    break;

                case T_WO1:
                case T_WO2:
                    it_save = it;
                    break;

                default:
                    it_save = end;
                    break;
                }
            }
        }

        // ÅuÇΩÇµÇΩÅBÅvÅuÇ–Ç¢ÇΩÅBÅvÅuÇ©ÇØÇΩÅBÅvÅuÇÌÇ¡ÇΩÅBÅvÇÃ
        // ÅuÅBÅvÇÅuÅAÅvÇ…ïœÇ¶ÇÈÅB
        // ÅuÇΩÇµÇΩÅ`ÅvÅuÇ–Ç¢ÇΩÅ`ÅvÅuÇ©ÇØÇΩÅ`ÅvÅuÇÌÇ¡ÇΩÅ`ÅvÇ
        // ÅuÇΩÇµÇΩÇÁÅ`ÅvÅuÇ–Ç¢ÇΩÇÁÅ`ÅvÅuÇ©ÇØÇΩÇÁÅ`ÅvÅuÇÌÇ¡ÇΩÇÁÅ`ÅvÇ…ïœÇ¶ÇÈÅB
        void resynth10(std::vector<info_type>& infos)
        {
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            for (; it != end; ++it)
            {
                if ((it->get_token() == T_TASHITA ||
                     it->get_token() == T_HIITA ||
                     it->get_token() == T_KAKETA ||
                     it->get_token() == T_WATTA) &&
                    (it + 1)->get_token() == T_PERIOD)
                {
                    (it + 1)->set_token(T_COMMA);
                }
                else if (it->get_token() == T_TASU &&
                         (it + 1)->get_token() == T_PERIOD)
                {
                    it->set_token(T_TASUTO);
                    (it + 1)->set_token(T_COMMA);
                }
                else if (it->get_token() == T_HIKU &&
                         (it + 1)->get_token() == T_PERIOD)
                {
                    it->set_token(T_HIKUTO);
                    (it + 1)->set_token(T_COMMA);
                }
                else if (it->get_token() == T_KAKERU &&
                         (it + 1)->get_token() == T_PERIOD)
                {
                    it->set_token(T_KAKERUTO);
                    (it + 1)->set_token(T_COMMA);
                }
                else if (it->get_token() == T_WARU &&
                         (it + 1)->get_token() == T_PERIOD)
                {
                    it->set_token(T_WARUTO);
                    (it + 1)->set_token(T_COMMA);
                }
                if ((it + 1)->get_token() == T_COMMA ||
                    (it + 1)->get_token() == T_KOTAE ||
                    (it + 1)->get_token() == T_AMARI ||
                    (it + 1)->get_token() == T_SORE)
                {
                    if (it->get_token() == T_TASHITA)
                        it->set_token(T_TASUTO);
                    else if (it->get_token() == T_HIITA)
                        it->set_token(T_HIKUTO);
                    else if (it->get_token() == T_KAKETA)
                        it->set_token(T_KAKERUTO);
                    else if (it->get_token() == T_WATTA)
                        it->set_token(T_WARUTO);
                }
            }
        }

        // ì¡íËÇÃåÍãÂíºëOÇÃÅuÅAÅvÇéÊÇËèúÇ≠ÅB
        void resynth11(std::vector<info_type>& infos)
        {
            std::vector<info_type> newinfos;
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            for (; it != end; ++it)
            {
                if (it->get_token() == T_COMMA)
                {
                    switch ((it + 1)->get_token())
                    {
                    case T_AMARI:
                    case T_BAI:
                    case T_DE:
                    case T_DIFF:
                    case T_HEIHOUKON:
                    case T_KAIJOU:
                    case T_HIITA:
                    case T_HIITE:
                    case T_HIKIZAN:
                    case T_HIKU:
                    case T_HIKUTO:
                    case T_IKURA:
                    case T_KAKERU:
                    case T_KAKERUTO:
                    case T_KAKETA:
                    case T_KAKETE:
                    case T_KAKEZAN:
                    case T_KANA:
                    case T_KARA:
                    case T_KEISAN:
                    case T_KOTAE:
                    case T_NOUCHI:
                    case T_ONEGAI:
                    case T_OSHIETE:
                    case T_PERCENT:
                    case T_PROD:
                    case T_QUOT:
                    case T_R_PAREN:
                    case T_SHITA:
                    case T_SHITE:
                    case T_SUM:
                    case T_SURUTO:
                    case T_TASHITA:
                    case T_TASHITE:
                    case T_TASHIZAN:
                    case T_TASU:
                    case T_TASUTO:
                    case T_WARIZAN:
                    case T_WARU:
                    case T_WARUTO:
                    case T_WATTA:
                    case T_WATTE:
                    case T_WO1:
                    case T_WO2:
                        ++it;
                        break;

                    default:
                        break;
                    }
                }
                newinfos.push_back(*it);
            }
            infos = newinfos;
        }

        // ÅuÇªÇÍÇÃÇ©Ç∏ÅvÇÅuÇªÇÍÅvÇ…ïœä∑Ç∑ÇÈÅB
        void resynth12(std::vector<info_type>& infos)
        {
            std::vector<info_type> newinfos;
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            std::vector<info_type>::iterator it_save = end;
            info_type info;
            for (; it != end; ++it)
            {
                if (it->get_token() == T_SORE &&
                    (it + 1)->get_token() == T_NO4 &&
                    (it + 2)->get_token() == T_MONO)
                {
                    newinfos.push_back(*it);
                    ++it;
                    ++it;
                }
                else
                {
                    newinfos.push_back(*it);
                }
            }
            infos = newinfos;
        }

        // ï∂ññÇÃÅuÇ©ÅvÇÅuÇ©Ç»ÅvÇ…Ç∑ÇÈÅB
        void resynth13(std::vector<info_type>& infos)
        {
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_IKURA:
                case T_WAKARAN:
                case T_OSHIETE:
                case T_SURUTO:
                case T_TASUTO:
                case T_KAKERUTO:
                case T_HIKUTO:
                case T_WARUTO:
                case T_WARIKIRU:
                case T_WARIKIRENAI:
                    if ((it + 1)->get_token() == T_KA)
                        (it + 1)->set_token(T_KANA);
                    break;

                default:
                    break;
                }
            }
        }

        // ï∂ññÇÃÅuÇΩÇ∑ÅvÅuÇ–Ç≠ÅvÅuÇ©ÇØÇÈÅvÅuÇÌÇÈÅvÇ
        // ÅuÇΩÇ∑Ç∆ÅvÅuÇ–Ç≠Ç∆ÅvÅuÇ©ÇØÇÈÇ∆ÅvÅuÇÌÇÈÇ∆ÅvÇ…Ç∑ÇÈÅB
        void resynth14(std::vector<info_type>& infos)
        {
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_TASU:
                    if ((it + 1)->get_token() == T_PERIOD)
                        it->set_token(T_TASUTO);
                    break;

                case T_HIKU:
                    if ((it + 1)->get_token() == T_PERIOD)
                        it->set_token(T_HIKUTO);
                    break;

                case T_KAKERU:
                    if ((it + 1)->get_token() == T_PERIOD)
                        it->set_token(T_KAKERUTO);
                    break;

                case T_WARU:
                    if ((it + 1)->get_token() == T_PERIOD)
                        it->set_token(T_WARUTO);
                    break;

                case T_SURU:
                    if ((it + 1)->get_token() == T_PERIOD)
                        it->set_token(T_SURUTO);
                    break;

                default:
                    break;
                }
            }
        }

        // éÆÇÃíÜÇ≈ÇÕÇ»Ç¢ÅAï∂èÕÇÃíÜÇÃÅuÇÃÇ©Ç¢Ç∂ÇÂÇ§ÅvÇÃÅuÇÃÅv(T_NO6)ÇT_NO4Ç…Ç∑ÇÈÅB
        void resynth15(std::vector<info_type>& infos)
        {
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_ACOS:
                case T_AMARI:
                case T_ASIN:
                case T_ATAN:
                case T_AVERAGE:
                case T_BAI:
                case T_COS:
                case T_COUNT:
                case T_DIFF:
                case T_EXP:
                case T_GYAKUSUU:
                case T_HEIHOU:
                case T_HEIHOUKON:
                case T_HIKIZAN:
                case T_KAIJOU:
                case T_KAKEZAN:
                case T_KEISAN:
                case T_KOTAE:
                case T_LOG:
                case T_LOG10:
                case T_MAX:
                case T_MIN:
                case T_MONO:
                case T_PROD:
                case T_QUOT:
                case T_RIPPOU:
                case T_ROOT:
                case T_SIN:
                case T_SINH:
                case T_SUM:
                case T_TAN:
                case T_TASHIZAN:
                case T_WARIZAN:
                case T_ZETTAICHI:
                    if ((it + 1)->get_token() == T_NO6 &&
                        (it + 2)->get_token() == T_KAIJOU)
                    {
                        (it + 1)->set_token(T_NO4);
                    }
                    break;

                default:
                    break;
                }
            }
        }

        // T_TASUTO, T_HIKUTO, T_KAKERUTO, T_WARUTOÇÃå„ÇÃT_SURUTOÇéÊÇËèúÇ≠ÅB
        void resynth16(std::vector<info_type>& infos)
        {
            std::vector<info_type> newinfos;
            std::vector<info_type>::iterator it = infos.begin();
            std::vector<info_type>::iterator end = infos.end();
            for (; it != end; ++it)
            {
                switch (it->get_token())
                {
                case T_TASUTO:
                case T_HIKUTO:
                case T_KAKERUTO:
                case T_WARUTO:
                    newinfos.push_back(*it);
                    if ((it + 1)->get_token() == T_SURUTO)
                        it++;
                    break;

                default:
                    newinfos.push_back(*it);
                }
            }
            infos = newinfos;
        }

    private:
        // NOTE: Scanner is not copyable.
        Scanner(const Scanner<Iterator, ParserSite>&);
        Scanner& operator=(const Scanner<Iterator, ParserSite>&);
    }; // class Scanner<Iterator, ParserSite>
} // namespace Calc_H

#endif  // ndef HSCANNER_H_
